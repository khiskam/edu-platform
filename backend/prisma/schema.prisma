// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role            Role              @default(user)
  uid             String            @unique
  firstName       String
  lastName        String
  completedLesson CompletedLesson[]
  completedTask   CompletedTask[]
}

model Category {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @unique
  description String
  lessons     Lesson[]
}

model Lesson {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  layout      String

  category        Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String            @db.Uuid
  task            Task[]
  completedLesson CompletedLesson[]
  image           LessonImage[]
}

model Task {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String
  description    String
  answers        String[]
  correctAnswers String[]

  lesson        Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId      String          @db.Uuid
  completedTask CompletedTask[]
}

model CompletedLesson {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String   @db.Uuid
  completedAt DateTime @default(now())

  @@id([userId, lessonId])
}

model CompletedTask {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String   @db.Uuid
  completedAt DateTime @default(now())

  @@id([userId, taskId])
}

model LessonImage {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path        String
  fileName    String
  contentType String
  size        Int
  lesson      Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String? @db.Uuid
}

enum Role {
  user
  admin
}
