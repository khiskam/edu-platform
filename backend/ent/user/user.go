// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// EdgeCompletedLessons holds the string denoting the completed_lessons edge name in mutations.
	EdgeCompletedLessons = "completed_lessons"
	// EdgeCompletedTasks holds the string denoting the completed_tasks edge name in mutations.
	EdgeCompletedTasks = "completed_tasks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CompletedLessonsTable is the table that holds the completed_lessons relation/edge.
	CompletedLessonsTable = "completed_lessons"
	// CompletedLessonsInverseTable is the table name for the CompletedLesson entity.
	// It exists in this package in order to avoid circular dependency with the "completedlesson" package.
	CompletedLessonsInverseTable = "completed_lessons"
	// CompletedLessonsColumn is the table column denoting the completed_lessons relation/edge.
	CompletedLessonsColumn = "user_id"
	// CompletedTasksTable is the table that holds the completed_tasks relation/edge.
	CompletedTasksTable = "completed_tasks"
	// CompletedTasksInverseTable is the table name for the CompletedTask entity.
	// It exists in this package in order to avoid circular dependency with the "completedtask" package.
	CompletedTasksInverseTable = "completed_tasks"
	// CompletedTasksColumn is the table column denoting the completed_tasks relation/edge.
	CompletedTasksColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldRole,
	FieldUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByCompletedLessonsCount orders the results by completed_lessons count.
func ByCompletedLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompletedLessonsStep(), opts...)
	}
}

// ByCompletedLessons orders the results by completed_lessons terms.
func ByCompletedLessons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedLessonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompletedTasksCount orders the results by completed_tasks count.
func ByCompletedTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompletedTasksStep(), opts...)
	}
}

// ByCompletedTasks orders the results by completed_tasks terms.
func ByCompletedTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompletedLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedLessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompletedLessonsTable, CompletedLessonsColumn),
	)
}
func newCompletedTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompletedTasksTable, CompletedTasksColumn),
	)
}
