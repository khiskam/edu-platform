// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedLessonCreate is the builder for creating a CompletedLesson entity.
type CompletedLessonCreate struct {
	config
	mutation *CompletedLessonMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (clc *CompletedLessonCreate) SetUserID(u uuid.UUID) *CompletedLessonCreate {
	clc.mutation.SetUserID(u)
	return clc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (clc *CompletedLessonCreate) SetNillableUserID(u *uuid.UUID) *CompletedLessonCreate {
	if u != nil {
		clc.SetUserID(*u)
	}
	return clc
}

// SetLessonID sets the "lesson_id" field.
func (clc *CompletedLessonCreate) SetLessonID(u uuid.UUID) *CompletedLessonCreate {
	clc.mutation.SetLessonID(u)
	return clc
}

// SetNillableLessonID sets the "lesson_id" field if the given value is not nil.
func (clc *CompletedLessonCreate) SetNillableLessonID(u *uuid.UUID) *CompletedLessonCreate {
	if u != nil {
		clc.SetLessonID(*u)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CompletedLessonCreate) SetID(u uuid.UUID) *CompletedLessonCreate {
	clc.mutation.SetID(u)
	return clc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (clc *CompletedLessonCreate) SetAuthorID(id uuid.UUID) *CompletedLessonCreate {
	clc.mutation.SetAuthorID(id)
	return clc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (clc *CompletedLessonCreate) SetNillableAuthorID(id *uuid.UUID) *CompletedLessonCreate {
	if id != nil {
		clc = clc.SetAuthorID(*id)
	}
	return clc
}

// SetAuthor sets the "author" edge to the User entity.
func (clc *CompletedLessonCreate) SetAuthor(u *User) *CompletedLessonCreate {
	return clc.SetAuthorID(u.ID)
}

// SetCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID.
func (clc *CompletedLessonCreate) SetCompletedLessonID(id uuid.UUID) *CompletedLessonCreate {
	clc.mutation.SetCompletedLessonID(id)
	return clc
}

// SetNillableCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID if the given value is not nil.
func (clc *CompletedLessonCreate) SetNillableCompletedLessonID(id *uuid.UUID) *CompletedLessonCreate {
	if id != nil {
		clc = clc.SetCompletedLessonID(*id)
	}
	return clc
}

// SetCompletedLesson sets the "completed_lesson" edge to the Lesson entity.
func (clc *CompletedLessonCreate) SetCompletedLesson(l *Lesson) *CompletedLessonCreate {
	return clc.SetCompletedLessonID(l.ID)
}

// Mutation returns the CompletedLessonMutation object of the builder.
func (clc *CompletedLessonCreate) Mutation() *CompletedLessonMutation {
	return clc.mutation
}

// Save creates the CompletedLesson in the database.
func (clc *CompletedLessonCreate) Save(ctx context.Context) (*CompletedLesson, error) {
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CompletedLessonCreate) SaveX(ctx context.Context) *CompletedLesson {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CompletedLessonCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CompletedLessonCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CompletedLessonCreate) check() error {
	return nil
}

func (clc *CompletedLessonCreate) sqlSave(ctx context.Context) (*CompletedLesson, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CompletedLessonCreate) createSpec() (*CompletedLesson, *sqlgraph.CreateSpec) {
	var (
		_node = &CompletedLesson{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(completedlesson.Table, sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID))
	)
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := clc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.AuthorTable,
			Columns: []string{completedlesson.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.CompletedLessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.CompletedLessonTable,
			Columns: []string{completedlesson.CompletedLessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LessonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompletedLessonCreateBulk is the builder for creating many CompletedLesson entities in bulk.
type CompletedLessonCreateBulk struct {
	config
	err      error
	builders []*CompletedLessonCreate
}

// Save creates the CompletedLesson entities in the database.
func (clcb *CompletedLessonCreateBulk) Save(ctx context.Context) ([]*CompletedLesson, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CompletedLesson, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompletedLessonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CompletedLessonCreateBulk) SaveX(ctx context.Context) []*CompletedLesson {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CompletedLessonCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CompletedLessonCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
