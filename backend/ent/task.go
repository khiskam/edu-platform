// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// UploadedFileID holds the value of the "uploaded_file_id" field.
	UploadedFileID uuid.UUID `json:"uploaded_file_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Task holds the value of the task edge.
	Task *Category `json:"task,omitempty"`
	// UploadedFile holds the value of the uploaded_file edge.
	UploadedFile *UploadedFile `json:"uploaded_file,omitempty"`
	// CompletedTasks holds the value of the completed_tasks edge.
	CompletedTasks []*CompletedTask `json:"completed_tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) TaskOrErr() (*Category, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// UploadedFileOrErr returns the UploadedFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) UploadedFileOrErr() (*UploadedFile, error) {
	if e.UploadedFile != nil {
		return e.UploadedFile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: uploadedfile.Label}
	}
	return nil, &NotLoadedError{edge: "uploaded_file"}
}

// CompletedTasksOrErr returns the CompletedTasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) CompletedTasksOrErr() ([]*CompletedTask, error) {
	if e.loadedTypes[2] {
		return e.CompletedTasks, nil
	}
	return nil, &NotLoadedError{edge: "completed_tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldTitle, task.FieldDescription, task.FieldAnswer:
			values[i] = new(sql.NullString)
		case task.FieldID, task.FieldUploadedFileID, task.FieldCategoryID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				t.Answer = value.String
			}
		case task.FieldUploadedFileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uploaded_file_id", values[i])
			} else if value != nil {
				t.UploadedFileID = *value
			}
		case task.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				t.CategoryID = *value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the Task entity.
func (t *Task) QueryTask() *CategoryQuery {
	return NewTaskClient(t.config).QueryTask(t)
}

// QueryUploadedFile queries the "uploaded_file" edge of the Task entity.
func (t *Task) QueryUploadedFile() *UploadedFileQuery {
	return NewTaskClient(t.config).QueryUploadedFile(t)
}

// QueryCompletedTasks queries the "completed_tasks" edge of the Task entity.
func (t *Task) QueryCompletedTasks() *CompletedTaskQuery {
	return NewTaskClient(t.config).QueryCompletedTasks(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(t.Answer)
	builder.WriteString(", ")
	builder.WriteString("uploaded_file_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UploadedFileID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
