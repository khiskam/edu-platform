// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetAnswer sets the "answer" field.
func (tu *TaskUpdate) SetAnswer(s string) *TaskUpdate {
	tu.mutation.SetAnswer(s)
	return tu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAnswer(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAnswer(*s)
	}
	return tu
}

// SetUploadedFileID sets the "uploaded_file_id" field.
func (tu *TaskUpdate) SetUploadedFileID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetUploadedFileID(u)
	return tu
}

// SetNillableUploadedFileID sets the "uploaded_file_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUploadedFileID(u *uuid.UUID) *TaskUpdate {
	if u != nil {
		tu.SetUploadedFileID(*u)
	}
	return tu
}

// ClearUploadedFileID clears the value of the "uploaded_file_id" field.
func (tu *TaskUpdate) ClearUploadedFileID() *TaskUpdate {
	tu.mutation.ClearUploadedFileID()
	return tu
}

// SetCategoryID sets the "category_id" field.
func (tu *TaskUpdate) SetCategoryID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetCategoryID(u)
	return tu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCategoryID(u *uuid.UUID) *TaskUpdate {
	if u != nil {
		tu.SetCategoryID(*u)
	}
	return tu
}

// ClearCategoryID clears the value of the "category_id" field.
func (tu *TaskUpdate) ClearCategoryID() *TaskUpdate {
	tu.mutation.ClearCategoryID()
	return tu
}

// SetTaskID sets the "task" edge to the Category entity by ID.
func (tu *TaskUpdate) SetTaskID(id uuid.UUID) *TaskUpdate {
	tu.mutation.SetTaskID(id)
	return tu
}

// SetNillableTaskID sets the "task" edge to the Category entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		tu = tu.SetTaskID(*id)
	}
	return tu
}

// SetTask sets the "task" edge to the Category entity.
func (tu *TaskUpdate) SetTask(c *Category) *TaskUpdate {
	return tu.SetTaskID(c.ID)
}

// SetUploadedFile sets the "uploaded_file" edge to the UploadedFile entity.
func (tu *TaskUpdate) SetUploadedFile(u *UploadedFile) *TaskUpdate {
	return tu.SetUploadedFileID(u.ID)
}

// AddCompletedTaskIDs adds the "completed_tasks" edge to the CompletedTask entity by IDs.
func (tu *TaskUpdate) AddCompletedTaskIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.AddCompletedTaskIDs(ids...)
	return tu
}

// AddCompletedTasks adds the "completed_tasks" edges to the CompletedTask entity.
func (tu *TaskUpdate) AddCompletedTasks(c ...*CompletedTask) *TaskUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCompletedTaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTask clears the "task" edge to the Category entity.
func (tu *TaskUpdate) ClearTask() *TaskUpdate {
	tu.mutation.ClearTask()
	return tu
}

// ClearUploadedFile clears the "uploaded_file" edge to the UploadedFile entity.
func (tu *TaskUpdate) ClearUploadedFile() *TaskUpdate {
	tu.mutation.ClearUploadedFile()
	return tu
}

// ClearCompletedTasks clears all "completed_tasks" edges to the CompletedTask entity.
func (tu *TaskUpdate) ClearCompletedTasks() *TaskUpdate {
	tu.mutation.ClearCompletedTasks()
	return tu
}

// RemoveCompletedTaskIDs removes the "completed_tasks" edge to CompletedTask entities by IDs.
func (tu *TaskUpdate) RemoveCompletedTaskIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.RemoveCompletedTaskIDs(ids...)
	return tu
}

// RemoveCompletedTasks removes "completed_tasks" edges to CompletedTask entities.
func (tu *TaskUpdate) RemoveCompletedTasks(c ...*CompletedTask) *TaskUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCompletedTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Answer(); ok {
		_spec.SetField(task.FieldAnswer, field.TypeString, value)
	}
	if tu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskTable,
			Columns: []string{task.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskTable,
			Columns: []string{task.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UploadedFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UploadedFileTable,
			Columns: []string{task.UploadedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UploadedFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UploadedFileTable,
			Columns: []string{task.UploadedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CompletedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCompletedTasksIDs(); len(nodes) > 0 && !tu.mutation.CompletedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompletedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetAnswer sets the "answer" field.
func (tuo *TaskUpdateOne) SetAnswer(s string) *TaskUpdateOne {
	tuo.mutation.SetAnswer(s)
	return tuo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAnswer(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAnswer(*s)
	}
	return tuo
}

// SetUploadedFileID sets the "uploaded_file_id" field.
func (tuo *TaskUpdateOne) SetUploadedFileID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetUploadedFileID(u)
	return tuo
}

// SetNillableUploadedFileID sets the "uploaded_file_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUploadedFileID(u *uuid.UUID) *TaskUpdateOne {
	if u != nil {
		tuo.SetUploadedFileID(*u)
	}
	return tuo
}

// ClearUploadedFileID clears the value of the "uploaded_file_id" field.
func (tuo *TaskUpdateOne) ClearUploadedFileID() *TaskUpdateOne {
	tuo.mutation.ClearUploadedFileID()
	return tuo
}

// SetCategoryID sets the "category_id" field.
func (tuo *TaskUpdateOne) SetCategoryID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetCategoryID(u)
	return tuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCategoryID(u *uuid.UUID) *TaskUpdateOne {
	if u != nil {
		tuo.SetCategoryID(*u)
	}
	return tuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (tuo *TaskUpdateOne) ClearCategoryID() *TaskUpdateOne {
	tuo.mutation.ClearCategoryID()
	return tuo
}

// SetTaskID sets the "task" edge to the Category entity by ID.
func (tuo *TaskUpdateOne) SetTaskID(id uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetTaskID(id)
	return tuo
}

// SetNillableTaskID sets the "task" edge to the Category entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetTaskID(*id)
	}
	return tuo
}

// SetTask sets the "task" edge to the Category entity.
func (tuo *TaskUpdateOne) SetTask(c *Category) *TaskUpdateOne {
	return tuo.SetTaskID(c.ID)
}

// SetUploadedFile sets the "uploaded_file" edge to the UploadedFile entity.
func (tuo *TaskUpdateOne) SetUploadedFile(u *UploadedFile) *TaskUpdateOne {
	return tuo.SetUploadedFileID(u.ID)
}

// AddCompletedTaskIDs adds the "completed_tasks" edge to the CompletedTask entity by IDs.
func (tuo *TaskUpdateOne) AddCompletedTaskIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.AddCompletedTaskIDs(ids...)
	return tuo
}

// AddCompletedTasks adds the "completed_tasks" edges to the CompletedTask entity.
func (tuo *TaskUpdateOne) AddCompletedTasks(c ...*CompletedTask) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCompletedTaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTask clears the "task" edge to the Category entity.
func (tuo *TaskUpdateOne) ClearTask() *TaskUpdateOne {
	tuo.mutation.ClearTask()
	return tuo
}

// ClearUploadedFile clears the "uploaded_file" edge to the UploadedFile entity.
func (tuo *TaskUpdateOne) ClearUploadedFile() *TaskUpdateOne {
	tuo.mutation.ClearUploadedFile()
	return tuo
}

// ClearCompletedTasks clears all "completed_tasks" edges to the CompletedTask entity.
func (tuo *TaskUpdateOne) ClearCompletedTasks() *TaskUpdateOne {
	tuo.mutation.ClearCompletedTasks()
	return tuo
}

// RemoveCompletedTaskIDs removes the "completed_tasks" edge to CompletedTask entities by IDs.
func (tuo *TaskUpdateOne) RemoveCompletedTaskIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.RemoveCompletedTaskIDs(ids...)
	return tuo
}

// RemoveCompletedTasks removes "completed_tasks" edges to CompletedTask entities.
func (tuo *TaskUpdateOne) RemoveCompletedTasks(c ...*CompletedTask) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCompletedTaskIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Answer(); ok {
		_spec.SetField(task.FieldAnswer, field.TypeString, value)
	}
	if tuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskTable,
			Columns: []string{task.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskTable,
			Columns: []string{task.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UploadedFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UploadedFileTable,
			Columns: []string{task.UploadedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UploadedFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UploadedFileTable,
			Columns: []string{task.UploadedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CompletedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCompletedTasksIDs(); len(nodes) > 0 && !tuo.mutation.CompletedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompletedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CompletedTasksTable,
			Columns: []string{task.CompletedTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
