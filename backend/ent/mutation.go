// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory        = "Category"
	TypeCompletedLesson = "CompletedLesson"
	TypeCompletedTask   = "CompletedTask"
	TypeLesson          = "Lesson"
	TypeTask            = "Task"
	TypeUploadedFile    = "UploadedFile"
	TypeUser            = "User"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	name           *string
	clearedFields  map[string]struct{}
	lessons        map[uuid.UUID]struct{}
	removedlessons map[uuid.UUID]struct{}
	clearedlessons bool
	tasks          map[uuid.UUID]struct{}
	removedtasks   map[uuid.UUID]struct{}
	clearedtasks   bool
	done           bool
	oldValue       func(context.Context) (*Category, error)
	predicates     []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id uuid.UUID) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddLessonIDs adds the "lessons" edge to the Lesson entity by ids.
func (m *CategoryMutation) AddLessonIDs(ids ...uuid.UUID) {
	if m.lessons == nil {
		m.lessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.lessons[ids[i]] = struct{}{}
	}
}

// ClearLessons clears the "lessons" edge to the Lesson entity.
func (m *CategoryMutation) ClearLessons() {
	m.clearedlessons = true
}

// LessonsCleared reports if the "lessons" edge to the Lesson entity was cleared.
func (m *CategoryMutation) LessonsCleared() bool {
	return m.clearedlessons
}

// RemoveLessonIDs removes the "lessons" edge to the Lesson entity by IDs.
func (m *CategoryMutation) RemoveLessonIDs(ids ...uuid.UUID) {
	if m.removedlessons == nil {
		m.removedlessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.lessons, ids[i])
		m.removedlessons[ids[i]] = struct{}{}
	}
}

// RemovedLessons returns the removed IDs of the "lessons" edge to the Lesson entity.
func (m *CategoryMutation) RemovedLessonsIDs() (ids []uuid.UUID) {
	for id := range m.removedlessons {
		ids = append(ids, id)
	}
	return
}

// LessonsIDs returns the "lessons" edge IDs in the mutation.
func (m *CategoryMutation) LessonsIDs() (ids []uuid.UUID) {
	for id := range m.lessons {
		ids = append(ids, id)
	}
	return
}

// ResetLessons resets all changes to the "lessons" edge.
func (m *CategoryMutation) ResetLessons() {
	m.lessons = nil
	m.clearedlessons = false
	m.removedlessons = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *CategoryMutation) AddTaskIDs(ids ...uuid.UUID) {
	if m.tasks == nil {
		m.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *CategoryMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *CategoryMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *CategoryMutation) RemoveTaskIDs(ids ...uuid.UUID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *CategoryMutation) RemovedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *CategoryMutation) TasksIDs() (ids []uuid.UUID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *CategoryMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lessons != nil {
		edges = append(edges, category.EdgeLessons)
	}
	if m.tasks != nil {
		edges = append(edges, category.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeLessons:
		ids := make([]ent.Value, 0, len(m.lessons))
		for id := range m.lessons {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlessons != nil {
		edges = append(edges, category.EdgeLessons)
	}
	if m.removedtasks != nil {
		edges = append(edges, category.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeLessons:
		ids := make([]ent.Value, 0, len(m.removedlessons))
		for id := range m.removedlessons {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlessons {
		edges = append(edges, category.EdgeLessons)
	}
	if m.clearedtasks {
		edges = append(edges, category.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeLessons:
		return m.clearedlessons
	case category.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeLessons:
		m.ResetLessons()
		return nil
	case category.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// CompletedLessonMutation represents an operation that mutates the CompletedLesson nodes in the graph.
type CompletedLessonMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	clearedFields           map[string]struct{}
	author                  *uuid.UUID
	clearedauthor           bool
	completed_lesson        *uuid.UUID
	clearedcompleted_lesson bool
	done                    bool
	oldValue                func(context.Context) (*CompletedLesson, error)
	predicates              []predicate.CompletedLesson
}

var _ ent.Mutation = (*CompletedLessonMutation)(nil)

// completedlessonOption allows management of the mutation configuration using functional options.
type completedlessonOption func(*CompletedLessonMutation)

// newCompletedLessonMutation creates new mutation for the CompletedLesson entity.
func newCompletedLessonMutation(c config, op Op, opts ...completedlessonOption) *CompletedLessonMutation {
	m := &CompletedLessonMutation{
		config:        c,
		op:            op,
		typ:           TypeCompletedLesson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompletedLessonID sets the ID field of the mutation.
func withCompletedLessonID(id uuid.UUID) completedlessonOption {
	return func(m *CompletedLessonMutation) {
		var (
			err   error
			once  sync.Once
			value *CompletedLesson
		)
		m.oldValue = func(ctx context.Context) (*CompletedLesson, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CompletedLesson.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompletedLesson sets the old CompletedLesson of the mutation.
func withCompletedLesson(node *CompletedLesson) completedlessonOption {
	return func(m *CompletedLessonMutation) {
		m.oldValue = func(context.Context) (*CompletedLesson, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompletedLessonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompletedLessonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CompletedLesson entities.
func (m *CompletedLessonMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompletedLessonMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompletedLessonMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CompletedLesson.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *CompletedLessonMutation) SetUserID(u uuid.UUID) {
	m.author = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CompletedLessonMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CompletedLesson entity.
// If the CompletedLesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedLessonMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CompletedLessonMutation) ClearUserID() {
	m.author = nil
	m.clearedFields[completedlesson.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CompletedLessonMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[completedlesson.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CompletedLessonMutation) ResetUserID() {
	m.author = nil
	delete(m.clearedFields, completedlesson.FieldUserID)
}

// SetLessonID sets the "lesson_id" field.
func (m *CompletedLessonMutation) SetLessonID(u uuid.UUID) {
	m.completed_lesson = &u
}

// LessonID returns the value of the "lesson_id" field in the mutation.
func (m *CompletedLessonMutation) LessonID() (r uuid.UUID, exists bool) {
	v := m.completed_lesson
	if v == nil {
		return
	}
	return *v, true
}

// OldLessonID returns the old "lesson_id" field's value of the CompletedLesson entity.
// If the CompletedLesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedLessonMutation) OldLessonID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLessonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLessonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLessonID: %w", err)
	}
	return oldValue.LessonID, nil
}

// ClearLessonID clears the value of the "lesson_id" field.
func (m *CompletedLessonMutation) ClearLessonID() {
	m.completed_lesson = nil
	m.clearedFields[completedlesson.FieldLessonID] = struct{}{}
}

// LessonIDCleared returns if the "lesson_id" field was cleared in this mutation.
func (m *CompletedLessonMutation) LessonIDCleared() bool {
	_, ok := m.clearedFields[completedlesson.FieldLessonID]
	return ok
}

// ResetLessonID resets all changes to the "lesson_id" field.
func (m *CompletedLessonMutation) ResetLessonID() {
	m.completed_lesson = nil
	delete(m.clearedFields, completedlesson.FieldLessonID)
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *CompletedLessonMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *CompletedLessonMutation) ClearAuthor() {
	m.clearedauthor = true
	m.clearedFields[completedlesson.FieldUserID] = struct{}{}
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *CompletedLessonMutation) AuthorCleared() bool {
	return m.UserIDCleared() || m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *CompletedLessonMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *CompletedLessonMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *CompletedLessonMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by id.
func (m *CompletedLessonMutation) SetCompletedLessonID(id uuid.UUID) {
	m.completed_lesson = &id
}

// ClearCompletedLesson clears the "completed_lesson" edge to the Lesson entity.
func (m *CompletedLessonMutation) ClearCompletedLesson() {
	m.clearedcompleted_lesson = true
	m.clearedFields[completedlesson.FieldLessonID] = struct{}{}
}

// CompletedLessonCleared reports if the "completed_lesson" edge to the Lesson entity was cleared.
func (m *CompletedLessonMutation) CompletedLessonCleared() bool {
	return m.LessonIDCleared() || m.clearedcompleted_lesson
}

// CompletedLessonID returns the "completed_lesson" edge ID in the mutation.
func (m *CompletedLessonMutation) CompletedLessonID() (id uuid.UUID, exists bool) {
	if m.completed_lesson != nil {
		return *m.completed_lesson, true
	}
	return
}

// CompletedLessonIDs returns the "completed_lesson" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompletedLessonID instead. It exists only for internal usage by the builders.
func (m *CompletedLessonMutation) CompletedLessonIDs() (ids []uuid.UUID) {
	if id := m.completed_lesson; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompletedLesson resets all changes to the "completed_lesson" edge.
func (m *CompletedLessonMutation) ResetCompletedLesson() {
	m.completed_lesson = nil
	m.clearedcompleted_lesson = false
}

// Where appends a list predicates to the CompletedLessonMutation builder.
func (m *CompletedLessonMutation) Where(ps ...predicate.CompletedLesson) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CompletedLessonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CompletedLessonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CompletedLesson, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CompletedLessonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CompletedLessonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CompletedLesson).
func (m *CompletedLessonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompletedLessonMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.author != nil {
		fields = append(fields, completedlesson.FieldUserID)
	}
	if m.completed_lesson != nil {
		fields = append(fields, completedlesson.FieldLessonID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompletedLessonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case completedlesson.FieldUserID:
		return m.UserID()
	case completedlesson.FieldLessonID:
		return m.LessonID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompletedLessonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case completedlesson.FieldUserID:
		return m.OldUserID(ctx)
	case completedlesson.FieldLessonID:
		return m.OldLessonID(ctx)
	}
	return nil, fmt.Errorf("unknown CompletedLesson field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompletedLessonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case completedlesson.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case completedlesson.FieldLessonID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLessonID(v)
		return nil
	}
	return fmt.Errorf("unknown CompletedLesson field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompletedLessonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompletedLessonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompletedLessonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CompletedLesson numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompletedLessonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(completedlesson.FieldUserID) {
		fields = append(fields, completedlesson.FieldUserID)
	}
	if m.FieldCleared(completedlesson.FieldLessonID) {
		fields = append(fields, completedlesson.FieldLessonID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompletedLessonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompletedLessonMutation) ClearField(name string) error {
	switch name {
	case completedlesson.FieldUserID:
		m.ClearUserID()
		return nil
	case completedlesson.FieldLessonID:
		m.ClearLessonID()
		return nil
	}
	return fmt.Errorf("unknown CompletedLesson nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompletedLessonMutation) ResetField(name string) error {
	switch name {
	case completedlesson.FieldUserID:
		m.ResetUserID()
		return nil
	case completedlesson.FieldLessonID:
		m.ResetLessonID()
		return nil
	}
	return fmt.Errorf("unknown CompletedLesson field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompletedLessonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, completedlesson.EdgeAuthor)
	}
	if m.completed_lesson != nil {
		edges = append(edges, completedlesson.EdgeCompletedLesson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompletedLessonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case completedlesson.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case completedlesson.EdgeCompletedLesson:
		if id := m.completed_lesson; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompletedLessonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompletedLessonMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompletedLessonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, completedlesson.EdgeAuthor)
	}
	if m.clearedcompleted_lesson {
		edges = append(edges, completedlesson.EdgeCompletedLesson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompletedLessonMutation) EdgeCleared(name string) bool {
	switch name {
	case completedlesson.EdgeAuthor:
		return m.clearedauthor
	case completedlesson.EdgeCompletedLesson:
		return m.clearedcompleted_lesson
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompletedLessonMutation) ClearEdge(name string) error {
	switch name {
	case completedlesson.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case completedlesson.EdgeCompletedLesson:
		m.ClearCompletedLesson()
		return nil
	}
	return fmt.Errorf("unknown CompletedLesson unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompletedLessonMutation) ResetEdge(name string) error {
	switch name {
	case completedlesson.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case completedlesson.EdgeCompletedLesson:
		m.ResetCompletedLesson()
		return nil
	}
	return fmt.Errorf("unknown CompletedLesson edge %s", name)
}

// CompletedTaskMutation represents an operation that mutates the CompletedTask nodes in the graph.
type CompletedTaskMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	answer                *string
	is_completed          *bool
	clearedFields         map[string]struct{}
	author                *uuid.UUID
	clearedauthor         bool
	completed_task        *uuid.UUID
	clearedcompleted_task bool
	done                  bool
	oldValue              func(context.Context) (*CompletedTask, error)
	predicates            []predicate.CompletedTask
}

var _ ent.Mutation = (*CompletedTaskMutation)(nil)

// completedtaskOption allows management of the mutation configuration using functional options.
type completedtaskOption func(*CompletedTaskMutation)

// newCompletedTaskMutation creates new mutation for the CompletedTask entity.
func newCompletedTaskMutation(c config, op Op, opts ...completedtaskOption) *CompletedTaskMutation {
	m := &CompletedTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeCompletedTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompletedTaskID sets the ID field of the mutation.
func withCompletedTaskID(id uuid.UUID) completedtaskOption {
	return func(m *CompletedTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *CompletedTask
		)
		m.oldValue = func(ctx context.Context) (*CompletedTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CompletedTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompletedTask sets the old CompletedTask of the mutation.
func withCompletedTask(node *CompletedTask) completedtaskOption {
	return func(m *CompletedTaskMutation) {
		m.oldValue = func(context.Context) (*CompletedTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompletedTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompletedTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CompletedTask entities.
func (m *CompletedTaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompletedTaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompletedTaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CompletedTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAnswer sets the "answer" field.
func (m *CompletedTaskMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *CompletedTaskMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the CompletedTask entity.
// If the CompletedTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedTaskMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *CompletedTaskMutation) ResetAnswer() {
	m.answer = nil
}

// SetIsCompleted sets the "is_completed" field.
func (m *CompletedTaskMutation) SetIsCompleted(b bool) {
	m.is_completed = &b
}

// IsCompleted returns the value of the "is_completed" field in the mutation.
func (m *CompletedTaskMutation) IsCompleted() (r bool, exists bool) {
	v := m.is_completed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCompleted returns the old "is_completed" field's value of the CompletedTask entity.
// If the CompletedTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedTaskMutation) OldIsCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCompleted: %w", err)
	}
	return oldValue.IsCompleted, nil
}

// ResetIsCompleted resets all changes to the "is_completed" field.
func (m *CompletedTaskMutation) ResetIsCompleted() {
	m.is_completed = nil
}

// SetUserID sets the "user_id" field.
func (m *CompletedTaskMutation) SetUserID(u uuid.UUID) {
	m.author = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CompletedTaskMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CompletedTask entity.
// If the CompletedTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedTaskMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CompletedTaskMutation) ClearUserID() {
	m.author = nil
	m.clearedFields[completedtask.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CompletedTaskMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[completedtask.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CompletedTaskMutation) ResetUserID() {
	m.author = nil
	delete(m.clearedFields, completedtask.FieldUserID)
}

// SetTaskID sets the "task_id" field.
func (m *CompletedTaskMutation) SetTaskID(u uuid.UUID) {
	m.completed_task = &u
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *CompletedTaskMutation) TaskID() (r uuid.UUID, exists bool) {
	v := m.completed_task
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the CompletedTask entity.
// If the CompletedTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompletedTaskMutation) OldTaskID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ClearTaskID clears the value of the "task_id" field.
func (m *CompletedTaskMutation) ClearTaskID() {
	m.completed_task = nil
	m.clearedFields[completedtask.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "task_id" field was cleared in this mutation.
func (m *CompletedTaskMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[completedtask.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *CompletedTaskMutation) ResetTaskID() {
	m.completed_task = nil
	delete(m.clearedFields, completedtask.FieldTaskID)
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *CompletedTaskMutation) SetAuthorID(id uuid.UUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *CompletedTaskMutation) ClearAuthor() {
	m.clearedauthor = true
	m.clearedFields[completedtask.FieldUserID] = struct{}{}
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *CompletedTaskMutation) AuthorCleared() bool {
	return m.UserIDCleared() || m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *CompletedTaskMutation) AuthorID() (id uuid.UUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *CompletedTaskMutation) AuthorIDs() (ids []uuid.UUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *CompletedTaskMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetCompletedTaskID sets the "completed_task" edge to the Task entity by id.
func (m *CompletedTaskMutation) SetCompletedTaskID(id uuid.UUID) {
	m.completed_task = &id
}

// ClearCompletedTask clears the "completed_task" edge to the Task entity.
func (m *CompletedTaskMutation) ClearCompletedTask() {
	m.clearedcompleted_task = true
	m.clearedFields[completedtask.FieldTaskID] = struct{}{}
}

// CompletedTaskCleared reports if the "completed_task" edge to the Task entity was cleared.
func (m *CompletedTaskMutation) CompletedTaskCleared() bool {
	return m.TaskIDCleared() || m.clearedcompleted_task
}

// CompletedTaskID returns the "completed_task" edge ID in the mutation.
func (m *CompletedTaskMutation) CompletedTaskID() (id uuid.UUID, exists bool) {
	if m.completed_task != nil {
		return *m.completed_task, true
	}
	return
}

// CompletedTaskIDs returns the "completed_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompletedTaskID instead. It exists only for internal usage by the builders.
func (m *CompletedTaskMutation) CompletedTaskIDs() (ids []uuid.UUID) {
	if id := m.completed_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompletedTask resets all changes to the "completed_task" edge.
func (m *CompletedTaskMutation) ResetCompletedTask() {
	m.completed_task = nil
	m.clearedcompleted_task = false
}

// Where appends a list predicates to the CompletedTaskMutation builder.
func (m *CompletedTaskMutation) Where(ps ...predicate.CompletedTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CompletedTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CompletedTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CompletedTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CompletedTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CompletedTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CompletedTask).
func (m *CompletedTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompletedTaskMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.answer != nil {
		fields = append(fields, completedtask.FieldAnswer)
	}
	if m.is_completed != nil {
		fields = append(fields, completedtask.FieldIsCompleted)
	}
	if m.author != nil {
		fields = append(fields, completedtask.FieldUserID)
	}
	if m.completed_task != nil {
		fields = append(fields, completedtask.FieldTaskID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompletedTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case completedtask.FieldAnswer:
		return m.Answer()
	case completedtask.FieldIsCompleted:
		return m.IsCompleted()
	case completedtask.FieldUserID:
		return m.UserID()
	case completedtask.FieldTaskID:
		return m.TaskID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompletedTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case completedtask.FieldAnswer:
		return m.OldAnswer(ctx)
	case completedtask.FieldIsCompleted:
		return m.OldIsCompleted(ctx)
	case completedtask.FieldUserID:
		return m.OldUserID(ctx)
	case completedtask.FieldTaskID:
		return m.OldTaskID(ctx)
	}
	return nil, fmt.Errorf("unknown CompletedTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompletedTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case completedtask.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	case completedtask.FieldIsCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCompleted(v)
		return nil
	case completedtask.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case completedtask.FieldTaskID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	}
	return fmt.Errorf("unknown CompletedTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompletedTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompletedTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompletedTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CompletedTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompletedTaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(completedtask.FieldUserID) {
		fields = append(fields, completedtask.FieldUserID)
	}
	if m.FieldCleared(completedtask.FieldTaskID) {
		fields = append(fields, completedtask.FieldTaskID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompletedTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompletedTaskMutation) ClearField(name string) error {
	switch name {
	case completedtask.FieldUserID:
		m.ClearUserID()
		return nil
	case completedtask.FieldTaskID:
		m.ClearTaskID()
		return nil
	}
	return fmt.Errorf("unknown CompletedTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompletedTaskMutation) ResetField(name string) error {
	switch name {
	case completedtask.FieldAnswer:
		m.ResetAnswer()
		return nil
	case completedtask.FieldIsCompleted:
		m.ResetIsCompleted()
		return nil
	case completedtask.FieldUserID:
		m.ResetUserID()
		return nil
	case completedtask.FieldTaskID:
		m.ResetTaskID()
		return nil
	}
	return fmt.Errorf("unknown CompletedTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompletedTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, completedtask.EdgeAuthor)
	}
	if m.completed_task != nil {
		edges = append(edges, completedtask.EdgeCompletedTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompletedTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case completedtask.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case completedtask.EdgeCompletedTask:
		if id := m.completed_task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompletedTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompletedTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompletedTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, completedtask.EdgeAuthor)
	}
	if m.clearedcompleted_task {
		edges = append(edges, completedtask.EdgeCompletedTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompletedTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case completedtask.EdgeAuthor:
		return m.clearedauthor
	case completedtask.EdgeCompletedTask:
		return m.clearedcompleted_task
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompletedTaskMutation) ClearEdge(name string) error {
	switch name {
	case completedtask.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case completedtask.EdgeCompletedTask:
		m.ClearCompletedTask()
		return nil
	}
	return fmt.Errorf("unknown CompletedTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompletedTaskMutation) ResetEdge(name string) error {
	switch name {
	case completedtask.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case completedtask.EdgeCompletedTask:
		m.ResetCompletedTask()
		return nil
	}
	return fmt.Errorf("unknown CompletedTask edge %s", name)
}

// LessonMutation represents an operation that mutates the Lesson nodes in the graph.
type LessonMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	title                    *string
	description              *string
	layout                   *string
	clearedFields            map[string]struct{}
	completed_lessons        map[uuid.UUID]struct{}
	removedcompleted_lessons map[uuid.UUID]struct{}
	clearedcompleted_lessons bool
	lesson                   *uuid.UUID
	clearedlesson            bool
	done                     bool
	oldValue                 func(context.Context) (*Lesson, error)
	predicates               []predicate.Lesson
}

var _ ent.Mutation = (*LessonMutation)(nil)

// lessonOption allows management of the mutation configuration using functional options.
type lessonOption func(*LessonMutation)

// newLessonMutation creates new mutation for the Lesson entity.
func newLessonMutation(c config, op Op, opts ...lessonOption) *LessonMutation {
	m := &LessonMutation{
		config:        c,
		op:            op,
		typ:           TypeLesson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLessonID sets the ID field of the mutation.
func withLessonID(id uuid.UUID) lessonOption {
	return func(m *LessonMutation) {
		var (
			err   error
			once  sync.Once
			value *Lesson
		)
		m.oldValue = func(ctx context.Context) (*Lesson, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lesson.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLesson sets the old Lesson of the mutation.
func withLesson(node *Lesson) lessonOption {
	return func(m *LessonMutation) {
		m.oldValue = func(context.Context) (*Lesson, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LessonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LessonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Lesson entities.
func (m *LessonMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LessonMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LessonMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Lesson.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *LessonMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *LessonMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Lesson entity.
// If the Lesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LessonMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *LessonMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *LessonMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *LessonMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Lesson entity.
// If the Lesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LessonMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *LessonMutation) ResetDescription() {
	m.description = nil
}

// SetLayout sets the "layout" field.
func (m *LessonMutation) SetLayout(s string) {
	m.layout = &s
}

// Layout returns the value of the "layout" field in the mutation.
func (m *LessonMutation) Layout() (r string, exists bool) {
	v := m.layout
	if v == nil {
		return
	}
	return *v, true
}

// OldLayout returns the old "layout" field's value of the Lesson entity.
// If the Lesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LessonMutation) OldLayout(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLayout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLayout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLayout: %w", err)
	}
	return oldValue.Layout, nil
}

// ResetLayout resets all changes to the "layout" field.
func (m *LessonMutation) ResetLayout() {
	m.layout = nil
}

// SetCategoryID sets the "category_id" field.
func (m *LessonMutation) SetCategoryID(u uuid.UUID) {
	m.lesson = &u
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *LessonMutation) CategoryID() (r uuid.UUID, exists bool) {
	v := m.lesson
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Lesson entity.
// If the Lesson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LessonMutation) OldCategoryID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *LessonMutation) ClearCategoryID() {
	m.lesson = nil
	m.clearedFields[lesson.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *LessonMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[lesson.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *LessonMutation) ResetCategoryID() {
	m.lesson = nil
	delete(m.clearedFields, lesson.FieldCategoryID)
}

// AddCompletedLessonIDs adds the "completed_lessons" edge to the CompletedLesson entity by ids.
func (m *LessonMutation) AddCompletedLessonIDs(ids ...uuid.UUID) {
	if m.completed_lessons == nil {
		m.completed_lessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.completed_lessons[ids[i]] = struct{}{}
	}
}

// ClearCompletedLessons clears the "completed_lessons" edge to the CompletedLesson entity.
func (m *LessonMutation) ClearCompletedLessons() {
	m.clearedcompleted_lessons = true
}

// CompletedLessonsCleared reports if the "completed_lessons" edge to the CompletedLesson entity was cleared.
func (m *LessonMutation) CompletedLessonsCleared() bool {
	return m.clearedcompleted_lessons
}

// RemoveCompletedLessonIDs removes the "completed_lessons" edge to the CompletedLesson entity by IDs.
func (m *LessonMutation) RemoveCompletedLessonIDs(ids ...uuid.UUID) {
	if m.removedcompleted_lessons == nil {
		m.removedcompleted_lessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.completed_lessons, ids[i])
		m.removedcompleted_lessons[ids[i]] = struct{}{}
	}
}

// RemovedCompletedLessons returns the removed IDs of the "completed_lessons" edge to the CompletedLesson entity.
func (m *LessonMutation) RemovedCompletedLessonsIDs() (ids []uuid.UUID) {
	for id := range m.removedcompleted_lessons {
		ids = append(ids, id)
	}
	return
}

// CompletedLessonsIDs returns the "completed_lessons" edge IDs in the mutation.
func (m *LessonMutation) CompletedLessonsIDs() (ids []uuid.UUID) {
	for id := range m.completed_lessons {
		ids = append(ids, id)
	}
	return
}

// ResetCompletedLessons resets all changes to the "completed_lessons" edge.
func (m *LessonMutation) ResetCompletedLessons() {
	m.completed_lessons = nil
	m.clearedcompleted_lessons = false
	m.removedcompleted_lessons = nil
}

// SetLessonID sets the "lesson" edge to the Category entity by id.
func (m *LessonMutation) SetLessonID(id uuid.UUID) {
	m.lesson = &id
}

// ClearLesson clears the "lesson" edge to the Category entity.
func (m *LessonMutation) ClearLesson() {
	m.clearedlesson = true
	m.clearedFields[lesson.FieldCategoryID] = struct{}{}
}

// LessonCleared reports if the "lesson" edge to the Category entity was cleared.
func (m *LessonMutation) LessonCleared() bool {
	return m.CategoryIDCleared() || m.clearedlesson
}

// LessonID returns the "lesson" edge ID in the mutation.
func (m *LessonMutation) LessonID() (id uuid.UUID, exists bool) {
	if m.lesson != nil {
		return *m.lesson, true
	}
	return
}

// LessonIDs returns the "lesson" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LessonID instead. It exists only for internal usage by the builders.
func (m *LessonMutation) LessonIDs() (ids []uuid.UUID) {
	if id := m.lesson; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLesson resets all changes to the "lesson" edge.
func (m *LessonMutation) ResetLesson() {
	m.lesson = nil
	m.clearedlesson = false
}

// Where appends a list predicates to the LessonMutation builder.
func (m *LessonMutation) Where(ps ...predicate.Lesson) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LessonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LessonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lesson, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LessonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LessonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lesson).
func (m *LessonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LessonMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, lesson.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, lesson.FieldDescription)
	}
	if m.layout != nil {
		fields = append(fields, lesson.FieldLayout)
	}
	if m.lesson != nil {
		fields = append(fields, lesson.FieldCategoryID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LessonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lesson.FieldTitle:
		return m.Title()
	case lesson.FieldDescription:
		return m.Description()
	case lesson.FieldLayout:
		return m.Layout()
	case lesson.FieldCategoryID:
		return m.CategoryID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LessonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lesson.FieldTitle:
		return m.OldTitle(ctx)
	case lesson.FieldDescription:
		return m.OldDescription(ctx)
	case lesson.FieldLayout:
		return m.OldLayout(ctx)
	case lesson.FieldCategoryID:
		return m.OldCategoryID(ctx)
	}
	return nil, fmt.Errorf("unknown Lesson field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LessonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lesson.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case lesson.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case lesson.FieldLayout:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLayout(v)
		return nil
	case lesson.FieldCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Lesson field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LessonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LessonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LessonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lesson numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LessonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lesson.FieldCategoryID) {
		fields = append(fields, lesson.FieldCategoryID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LessonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LessonMutation) ClearField(name string) error {
	switch name {
	case lesson.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Lesson nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LessonMutation) ResetField(name string) error {
	switch name {
	case lesson.FieldTitle:
		m.ResetTitle()
		return nil
	case lesson.FieldDescription:
		m.ResetDescription()
		return nil
	case lesson.FieldLayout:
		m.ResetLayout()
		return nil
	case lesson.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Lesson field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LessonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.completed_lessons != nil {
		edges = append(edges, lesson.EdgeCompletedLessons)
	}
	if m.lesson != nil {
		edges = append(edges, lesson.EdgeLesson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LessonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lesson.EdgeCompletedLessons:
		ids := make([]ent.Value, 0, len(m.completed_lessons))
		for id := range m.completed_lessons {
			ids = append(ids, id)
		}
		return ids
	case lesson.EdgeLesson:
		if id := m.lesson; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LessonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcompleted_lessons != nil {
		edges = append(edges, lesson.EdgeCompletedLessons)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LessonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lesson.EdgeCompletedLessons:
		ids := make([]ent.Value, 0, len(m.removedcompleted_lessons))
		for id := range m.removedcompleted_lessons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LessonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcompleted_lessons {
		edges = append(edges, lesson.EdgeCompletedLessons)
	}
	if m.clearedlesson {
		edges = append(edges, lesson.EdgeLesson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LessonMutation) EdgeCleared(name string) bool {
	switch name {
	case lesson.EdgeCompletedLessons:
		return m.clearedcompleted_lessons
	case lesson.EdgeLesson:
		return m.clearedlesson
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LessonMutation) ClearEdge(name string) error {
	switch name {
	case lesson.EdgeLesson:
		m.ClearLesson()
		return nil
	}
	return fmt.Errorf("unknown Lesson unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LessonMutation) ResetEdge(name string) error {
	switch name {
	case lesson.EdgeCompletedLessons:
		m.ResetCompletedLessons()
		return nil
	case lesson.EdgeLesson:
		m.ResetLesson()
		return nil
	}
	return fmt.Errorf("unknown Lesson edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	title                  *string
	description            *string
	answer                 *string
	clearedFields          map[string]struct{}
	task                   *uuid.UUID
	clearedtask            bool
	uploaded_file          *uuid.UUID
	cleareduploaded_file   bool
	completed_tasks        map[uuid.UUID]struct{}
	removedcompleted_tasks map[uuid.UUID]struct{}
	clearedcompleted_tasks bool
	done                   bool
	oldValue               func(context.Context) (*Task, error)
	predicates             []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TaskMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
}

// SetAnswer sets the "answer" field.
func (m *TaskMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *TaskMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *TaskMutation) ResetAnswer() {
	m.answer = nil
}

// SetUploadedFileID sets the "uploaded_file_id" field.
func (m *TaskMutation) SetUploadedFileID(u uuid.UUID) {
	m.uploaded_file = &u
}

// UploadedFileID returns the value of the "uploaded_file_id" field in the mutation.
func (m *TaskMutation) UploadedFileID() (r uuid.UUID, exists bool) {
	v := m.uploaded_file
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadedFileID returns the old "uploaded_file_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUploadedFileID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadedFileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadedFileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadedFileID: %w", err)
	}
	return oldValue.UploadedFileID, nil
}

// ClearUploadedFileID clears the value of the "uploaded_file_id" field.
func (m *TaskMutation) ClearUploadedFileID() {
	m.uploaded_file = nil
	m.clearedFields[task.FieldUploadedFileID] = struct{}{}
}

// UploadedFileIDCleared returns if the "uploaded_file_id" field was cleared in this mutation.
func (m *TaskMutation) UploadedFileIDCleared() bool {
	_, ok := m.clearedFields[task.FieldUploadedFileID]
	return ok
}

// ResetUploadedFileID resets all changes to the "uploaded_file_id" field.
func (m *TaskMutation) ResetUploadedFileID() {
	m.uploaded_file = nil
	delete(m.clearedFields, task.FieldUploadedFileID)
}

// SetCategoryID sets the "category_id" field.
func (m *TaskMutation) SetCategoryID(u uuid.UUID) {
	m.task = &u
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *TaskMutation) CategoryID() (r uuid.UUID, exists bool) {
	v := m.task
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCategoryID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *TaskMutation) ClearCategoryID() {
	m.task = nil
	m.clearedFields[task.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *TaskMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[task.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *TaskMutation) ResetCategoryID() {
	m.task = nil
	delete(m.clearedFields, task.FieldCategoryID)
}

// SetTaskID sets the "task" edge to the Category entity by id.
func (m *TaskMutation) SetTaskID(id uuid.UUID) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Category entity.
func (m *TaskMutation) ClearTask() {
	m.clearedtask = true
	m.clearedFields[task.FieldCategoryID] = struct{}{}
}

// TaskCleared reports if the "task" edge to the Category entity was cleared.
func (m *TaskMutation) TaskCleared() bool {
	return m.CategoryIDCleared() || m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *TaskMutation) TaskID() (id uuid.UUID, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) TaskIDs() (ids []uuid.UUID) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *TaskMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// ClearUploadedFile clears the "uploaded_file" edge to the UploadedFile entity.
func (m *TaskMutation) ClearUploadedFile() {
	m.cleareduploaded_file = true
	m.clearedFields[task.FieldUploadedFileID] = struct{}{}
}

// UploadedFileCleared reports if the "uploaded_file" edge to the UploadedFile entity was cleared.
func (m *TaskMutation) UploadedFileCleared() bool {
	return m.UploadedFileIDCleared() || m.cleareduploaded_file
}

// UploadedFileIDs returns the "uploaded_file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UploadedFileID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) UploadedFileIDs() (ids []uuid.UUID) {
	if id := m.uploaded_file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUploadedFile resets all changes to the "uploaded_file" edge.
func (m *TaskMutation) ResetUploadedFile() {
	m.uploaded_file = nil
	m.cleareduploaded_file = false
}

// AddCompletedTaskIDs adds the "completed_tasks" edge to the CompletedTask entity by ids.
func (m *TaskMutation) AddCompletedTaskIDs(ids ...uuid.UUID) {
	if m.completed_tasks == nil {
		m.completed_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.completed_tasks[ids[i]] = struct{}{}
	}
}

// ClearCompletedTasks clears the "completed_tasks" edge to the CompletedTask entity.
func (m *TaskMutation) ClearCompletedTasks() {
	m.clearedcompleted_tasks = true
}

// CompletedTasksCleared reports if the "completed_tasks" edge to the CompletedTask entity was cleared.
func (m *TaskMutation) CompletedTasksCleared() bool {
	return m.clearedcompleted_tasks
}

// RemoveCompletedTaskIDs removes the "completed_tasks" edge to the CompletedTask entity by IDs.
func (m *TaskMutation) RemoveCompletedTaskIDs(ids ...uuid.UUID) {
	if m.removedcompleted_tasks == nil {
		m.removedcompleted_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.completed_tasks, ids[i])
		m.removedcompleted_tasks[ids[i]] = struct{}{}
	}
}

// RemovedCompletedTasks returns the removed IDs of the "completed_tasks" edge to the CompletedTask entity.
func (m *TaskMutation) RemovedCompletedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedcompleted_tasks {
		ids = append(ids, id)
	}
	return
}

// CompletedTasksIDs returns the "completed_tasks" edge IDs in the mutation.
func (m *TaskMutation) CompletedTasksIDs() (ids []uuid.UUID) {
	for id := range m.completed_tasks {
		ids = append(ids, id)
	}
	return
}

// ResetCompletedTasks resets all changes to the "completed_tasks" edge.
func (m *TaskMutation) ResetCompletedTasks() {
	m.completed_tasks = nil
	m.clearedcompleted_tasks = false
	m.removedcompleted_tasks = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, task.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.answer != nil {
		fields = append(fields, task.FieldAnswer)
	}
	if m.uploaded_file != nil {
		fields = append(fields, task.FieldUploadedFileID)
	}
	if m.task != nil {
		fields = append(fields, task.FieldCategoryID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTitle:
		return m.Title()
	case task.FieldDescription:
		return m.Description()
	case task.FieldAnswer:
		return m.Answer()
	case task.FieldUploadedFileID:
		return m.UploadedFileID()
	case task.FieldCategoryID:
		return m.CategoryID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldTitle:
		return m.OldTitle(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldAnswer:
		return m.OldAnswer(ctx)
	case task.FieldUploadedFileID:
		return m.OldUploadedFileID(ctx)
	case task.FieldCategoryID:
		return m.OldCategoryID(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	case task.FieldUploadedFileID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadedFileID(v)
		return nil
	case task.FieldCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldUploadedFileID) {
		fields = append(fields, task.FieldUploadedFileID)
	}
	if m.FieldCleared(task.FieldCategoryID) {
		fields = append(fields, task.FieldCategoryID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldUploadedFileID:
		m.ClearUploadedFileID()
		return nil
	case task.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldTitle:
		m.ResetTitle()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldAnswer:
		m.ResetAnswer()
		return nil
	case task.FieldUploadedFileID:
		m.ResetUploadedFileID()
		return nil
	case task.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.task != nil {
		edges = append(edges, task.EdgeTask)
	}
	if m.uploaded_file != nil {
		edges = append(edges, task.EdgeUploadedFile)
	}
	if m.completed_tasks != nil {
		edges = append(edges, task.EdgeCompletedTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeUploadedFile:
		if id := m.uploaded_file; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeCompletedTasks:
		ids := make([]ent.Value, 0, len(m.completed_tasks))
		for id := range m.completed_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcompleted_tasks != nil {
		edges = append(edges, task.EdgeCompletedTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeCompletedTasks:
		ids := make([]ent.Value, 0, len(m.removedcompleted_tasks))
		for id := range m.removedcompleted_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtask {
		edges = append(edges, task.EdgeTask)
	}
	if m.cleareduploaded_file {
		edges = append(edges, task.EdgeUploadedFile)
	}
	if m.clearedcompleted_tasks {
		edges = append(edges, task.EdgeCompletedTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeTask:
		return m.clearedtask
	case task.EdgeUploadedFile:
		return m.cleareduploaded_file
	case task.EdgeCompletedTasks:
		return m.clearedcompleted_tasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeTask:
		m.ClearTask()
		return nil
	case task.EdgeUploadedFile:
		m.ClearUploadedFile()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeTask:
		m.ResetTask()
		return nil
	case task.EdgeUploadedFile:
		m.ResetUploadedFile()
		return nil
	case task.EdgeCompletedTasks:
		m.ResetCompletedTasks()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// UploadedFileMutation represents an operation that mutates the UploadedFile nodes in the graph.
type UploadedFileMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	file_name     *string
	content_type  *string
	size          *int64
	addsize       *int64
	clearedFields map[string]struct{}
	tasks         map[uuid.UUID]struct{}
	removedtasks  map[uuid.UUID]struct{}
	clearedtasks  bool
	done          bool
	oldValue      func(context.Context) (*UploadedFile, error)
	predicates    []predicate.UploadedFile
}

var _ ent.Mutation = (*UploadedFileMutation)(nil)

// uploadedfileOption allows management of the mutation configuration using functional options.
type uploadedfileOption func(*UploadedFileMutation)

// newUploadedFileMutation creates new mutation for the UploadedFile entity.
func newUploadedFileMutation(c config, op Op, opts ...uploadedfileOption) *UploadedFileMutation {
	m := &UploadedFileMutation{
		config:        c,
		op:            op,
		typ:           TypeUploadedFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUploadedFileID sets the ID field of the mutation.
func withUploadedFileID(id uuid.UUID) uploadedfileOption {
	return func(m *UploadedFileMutation) {
		var (
			err   error
			once  sync.Once
			value *UploadedFile
		)
		m.oldValue = func(ctx context.Context) (*UploadedFile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UploadedFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUploadedFile sets the old UploadedFile of the mutation.
func withUploadedFile(node *UploadedFile) uploadedfileOption {
	return func(m *UploadedFileMutation) {
		m.oldValue = func(context.Context) (*UploadedFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UploadedFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UploadedFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UploadedFile entities.
func (m *UploadedFileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UploadedFileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UploadedFileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UploadedFile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileName sets the "file_name" field.
func (m *UploadedFileMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *UploadedFileMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the UploadedFile entity.
// If the UploadedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadedFileMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *UploadedFileMutation) ResetFileName() {
	m.file_name = nil
}

// SetContentType sets the "content_type" field.
func (m *UploadedFileMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *UploadedFileMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the UploadedFile entity.
// If the UploadedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadedFileMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *UploadedFileMutation) ResetContentType() {
	m.content_type = nil
}

// SetSize sets the "size" field.
func (m *UploadedFileMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *UploadedFileMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the UploadedFile entity.
// If the UploadedFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadedFileMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *UploadedFileMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *UploadedFileMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *UploadedFileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *UploadedFileMutation) AddTaskIDs(ids ...uuid.UUID) {
	if m.tasks == nil {
		m.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *UploadedFileMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *UploadedFileMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *UploadedFileMutation) RemoveTaskIDs(ids ...uuid.UUID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *UploadedFileMutation) RemovedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *UploadedFileMutation) TasksIDs() (ids []uuid.UUID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *UploadedFileMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the UploadedFileMutation builder.
func (m *UploadedFileMutation) Where(ps ...predicate.UploadedFile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UploadedFileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UploadedFileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UploadedFile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UploadedFileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UploadedFileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UploadedFile).
func (m *UploadedFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UploadedFileMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.file_name != nil {
		fields = append(fields, uploadedfile.FieldFileName)
	}
	if m.content_type != nil {
		fields = append(fields, uploadedfile.FieldContentType)
	}
	if m.size != nil {
		fields = append(fields, uploadedfile.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UploadedFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uploadedfile.FieldFileName:
		return m.FileName()
	case uploadedfile.FieldContentType:
		return m.ContentType()
	case uploadedfile.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UploadedFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uploadedfile.FieldFileName:
		return m.OldFileName(ctx)
	case uploadedfile.FieldContentType:
		return m.OldContentType(ctx)
	case uploadedfile.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown UploadedFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadedFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uploadedfile.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case uploadedfile.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case uploadedfile.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown UploadedFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UploadedFileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, uploadedfile.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UploadedFileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case uploadedfile.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadedFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case uploadedfile.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown UploadedFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UploadedFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UploadedFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UploadedFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UploadedFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UploadedFileMutation) ResetField(name string) error {
	switch name {
	case uploadedfile.FieldFileName:
		m.ResetFileName()
		return nil
	case uploadedfile.FieldContentType:
		m.ResetContentType()
		return nil
	case uploadedfile.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown UploadedFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UploadedFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tasks != nil {
		edges = append(edges, uploadedfile.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UploadedFileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uploadedfile.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UploadedFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtasks != nil {
		edges = append(edges, uploadedfile.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UploadedFileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case uploadedfile.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UploadedFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtasks {
		edges = append(edges, uploadedfile.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UploadedFileMutation) EdgeCleared(name string) bool {
	switch name {
	case uploadedfile.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UploadedFileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadedFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UploadedFileMutation) ResetEdge(name string) error {
	switch name {
	case uploadedfile.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown UploadedFile edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	role                     *user.Role
	uid                      *string
	clearedFields            map[string]struct{}
	completed_lessons        map[uuid.UUID]struct{}
	removedcompleted_lessons map[uuid.UUID]struct{}
	clearedcompleted_lessons bool
	completed_tasks          map[uuid.UUID]struct{}
	removedcompleted_tasks   map[uuid.UUID]struct{}
	clearedcompleted_tasks   bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetUID sets the "uid" field.
func (m *UserMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *UserMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *UserMutation) ResetUID() {
	m.uid = nil
}

// AddCompletedLessonIDs adds the "completed_lessons" edge to the CompletedLesson entity by ids.
func (m *UserMutation) AddCompletedLessonIDs(ids ...uuid.UUID) {
	if m.completed_lessons == nil {
		m.completed_lessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.completed_lessons[ids[i]] = struct{}{}
	}
}

// ClearCompletedLessons clears the "completed_lessons" edge to the CompletedLesson entity.
func (m *UserMutation) ClearCompletedLessons() {
	m.clearedcompleted_lessons = true
}

// CompletedLessonsCleared reports if the "completed_lessons" edge to the CompletedLesson entity was cleared.
func (m *UserMutation) CompletedLessonsCleared() bool {
	return m.clearedcompleted_lessons
}

// RemoveCompletedLessonIDs removes the "completed_lessons" edge to the CompletedLesson entity by IDs.
func (m *UserMutation) RemoveCompletedLessonIDs(ids ...uuid.UUID) {
	if m.removedcompleted_lessons == nil {
		m.removedcompleted_lessons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.completed_lessons, ids[i])
		m.removedcompleted_lessons[ids[i]] = struct{}{}
	}
}

// RemovedCompletedLessons returns the removed IDs of the "completed_lessons" edge to the CompletedLesson entity.
func (m *UserMutation) RemovedCompletedLessonsIDs() (ids []uuid.UUID) {
	for id := range m.removedcompleted_lessons {
		ids = append(ids, id)
	}
	return
}

// CompletedLessonsIDs returns the "completed_lessons" edge IDs in the mutation.
func (m *UserMutation) CompletedLessonsIDs() (ids []uuid.UUID) {
	for id := range m.completed_lessons {
		ids = append(ids, id)
	}
	return
}

// ResetCompletedLessons resets all changes to the "completed_lessons" edge.
func (m *UserMutation) ResetCompletedLessons() {
	m.completed_lessons = nil
	m.clearedcompleted_lessons = false
	m.removedcompleted_lessons = nil
}

// AddCompletedTaskIDs adds the "completed_tasks" edge to the CompletedTask entity by ids.
func (m *UserMutation) AddCompletedTaskIDs(ids ...uuid.UUID) {
	if m.completed_tasks == nil {
		m.completed_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.completed_tasks[ids[i]] = struct{}{}
	}
}

// ClearCompletedTasks clears the "completed_tasks" edge to the CompletedTask entity.
func (m *UserMutation) ClearCompletedTasks() {
	m.clearedcompleted_tasks = true
}

// CompletedTasksCleared reports if the "completed_tasks" edge to the CompletedTask entity was cleared.
func (m *UserMutation) CompletedTasksCleared() bool {
	return m.clearedcompleted_tasks
}

// RemoveCompletedTaskIDs removes the "completed_tasks" edge to the CompletedTask entity by IDs.
func (m *UserMutation) RemoveCompletedTaskIDs(ids ...uuid.UUID) {
	if m.removedcompleted_tasks == nil {
		m.removedcompleted_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.completed_tasks, ids[i])
		m.removedcompleted_tasks[ids[i]] = struct{}{}
	}
}

// RemovedCompletedTasks returns the removed IDs of the "completed_tasks" edge to the CompletedTask entity.
func (m *UserMutation) RemovedCompletedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedcompleted_tasks {
		ids = append(ids, id)
	}
	return
}

// CompletedTasksIDs returns the "completed_tasks" edge IDs in the mutation.
func (m *UserMutation) CompletedTasksIDs() (ids []uuid.UUID) {
	for id := range m.completed_tasks {
		ids = append(ids, id)
	}
	return
}

// ResetCompletedTasks resets all changes to the "completed_tasks" edge.
func (m *UserMutation) ResetCompletedTasks() {
	m.completed_tasks = nil
	m.clearedcompleted_tasks = false
	m.removedcompleted_tasks = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.uid != nil {
		fields = append(fields, user.FieldUID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRole:
		return m.Role()
	case user.FieldUID:
		return m.UID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldUID:
		return m.OldUID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldUID:
		m.ResetUID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.completed_lessons != nil {
		edges = append(edges, user.EdgeCompletedLessons)
	}
	if m.completed_tasks != nil {
		edges = append(edges, user.EdgeCompletedTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCompletedLessons:
		ids := make([]ent.Value, 0, len(m.completed_lessons))
		for id := range m.completed_lessons {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCompletedTasks:
		ids := make([]ent.Value, 0, len(m.completed_tasks))
		for id := range m.completed_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcompleted_lessons != nil {
		edges = append(edges, user.EdgeCompletedLessons)
	}
	if m.removedcompleted_tasks != nil {
		edges = append(edges, user.EdgeCompletedTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCompletedLessons:
		ids := make([]ent.Value, 0, len(m.removedcompleted_lessons))
		for id := range m.removedcompleted_lessons {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCompletedTasks:
		ids := make([]ent.Value, 0, len(m.removedcompleted_tasks))
		for id := range m.removedcompleted_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcompleted_lessons {
		edges = append(edges, user.EdgeCompletedLessons)
	}
	if m.clearedcompleted_tasks {
		edges = append(edges, user.EdgeCompletedTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCompletedLessons:
		return m.clearedcompleted_lessons
	case user.EdgeCompletedTasks:
		return m.clearedcompleted_tasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCompletedLessons:
		m.ResetCompletedLessons()
		return nil
	case user.EdgeCompletedTasks:
		m.ResetCompletedTasks()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
