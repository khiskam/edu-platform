// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedLessonUpdate is the builder for updating CompletedLesson entities.
type CompletedLessonUpdate struct {
	config
	hooks    []Hook
	mutation *CompletedLessonMutation
}

// Where appends a list predicates to the CompletedLessonUpdate builder.
func (clu *CompletedLessonUpdate) Where(ps ...predicate.CompletedLesson) *CompletedLessonUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetUserID sets the "user_id" field.
func (clu *CompletedLessonUpdate) SetUserID(u uuid.UUID) *CompletedLessonUpdate {
	clu.mutation.SetUserID(u)
	return clu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (clu *CompletedLessonUpdate) SetNillableUserID(u *uuid.UUID) *CompletedLessonUpdate {
	if u != nil {
		clu.SetUserID(*u)
	}
	return clu
}

// ClearUserID clears the value of the "user_id" field.
func (clu *CompletedLessonUpdate) ClearUserID() *CompletedLessonUpdate {
	clu.mutation.ClearUserID()
	return clu
}

// SetLessonID sets the "lesson_id" field.
func (clu *CompletedLessonUpdate) SetLessonID(u uuid.UUID) *CompletedLessonUpdate {
	clu.mutation.SetLessonID(u)
	return clu
}

// SetNillableLessonID sets the "lesson_id" field if the given value is not nil.
func (clu *CompletedLessonUpdate) SetNillableLessonID(u *uuid.UUID) *CompletedLessonUpdate {
	if u != nil {
		clu.SetLessonID(*u)
	}
	return clu
}

// ClearLessonID clears the value of the "lesson_id" field.
func (clu *CompletedLessonUpdate) ClearLessonID() *CompletedLessonUpdate {
	clu.mutation.ClearLessonID()
	return clu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (clu *CompletedLessonUpdate) SetAuthorID(id uuid.UUID) *CompletedLessonUpdate {
	clu.mutation.SetAuthorID(id)
	return clu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (clu *CompletedLessonUpdate) SetNillableAuthorID(id *uuid.UUID) *CompletedLessonUpdate {
	if id != nil {
		clu = clu.SetAuthorID(*id)
	}
	return clu
}

// SetAuthor sets the "author" edge to the User entity.
func (clu *CompletedLessonUpdate) SetAuthor(u *User) *CompletedLessonUpdate {
	return clu.SetAuthorID(u.ID)
}

// SetCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID.
func (clu *CompletedLessonUpdate) SetCompletedLessonID(id uuid.UUID) *CompletedLessonUpdate {
	clu.mutation.SetCompletedLessonID(id)
	return clu
}

// SetNillableCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID if the given value is not nil.
func (clu *CompletedLessonUpdate) SetNillableCompletedLessonID(id *uuid.UUID) *CompletedLessonUpdate {
	if id != nil {
		clu = clu.SetCompletedLessonID(*id)
	}
	return clu
}

// SetCompletedLesson sets the "completed_lesson" edge to the Lesson entity.
func (clu *CompletedLessonUpdate) SetCompletedLesson(l *Lesson) *CompletedLessonUpdate {
	return clu.SetCompletedLessonID(l.ID)
}

// Mutation returns the CompletedLessonMutation object of the builder.
func (clu *CompletedLessonUpdate) Mutation() *CompletedLessonMutation {
	return clu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (clu *CompletedLessonUpdate) ClearAuthor() *CompletedLessonUpdate {
	clu.mutation.ClearAuthor()
	return clu
}

// ClearCompletedLesson clears the "completed_lesson" edge to the Lesson entity.
func (clu *CompletedLessonUpdate) ClearCompletedLesson() *CompletedLessonUpdate {
	clu.mutation.ClearCompletedLesson()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CompletedLessonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CompletedLessonUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CompletedLessonUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CompletedLessonUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *CompletedLessonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(completedlesson.Table, completedlesson.Columns, sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.AuthorTable,
			Columns: []string{completedlesson.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.AuthorTable,
			Columns: []string{completedlesson.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.CompletedLessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.CompletedLessonTable,
			Columns: []string{completedlesson.CompletedLessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.CompletedLessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.CompletedLessonTable,
			Columns: []string{completedlesson.CompletedLessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedlesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CompletedLessonUpdateOne is the builder for updating a single CompletedLesson entity.
type CompletedLessonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompletedLessonMutation
}

// SetUserID sets the "user_id" field.
func (cluo *CompletedLessonUpdateOne) SetUserID(u uuid.UUID) *CompletedLessonUpdateOne {
	cluo.mutation.SetUserID(u)
	return cluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cluo *CompletedLessonUpdateOne) SetNillableUserID(u *uuid.UUID) *CompletedLessonUpdateOne {
	if u != nil {
		cluo.SetUserID(*u)
	}
	return cluo
}

// ClearUserID clears the value of the "user_id" field.
func (cluo *CompletedLessonUpdateOne) ClearUserID() *CompletedLessonUpdateOne {
	cluo.mutation.ClearUserID()
	return cluo
}

// SetLessonID sets the "lesson_id" field.
func (cluo *CompletedLessonUpdateOne) SetLessonID(u uuid.UUID) *CompletedLessonUpdateOne {
	cluo.mutation.SetLessonID(u)
	return cluo
}

// SetNillableLessonID sets the "lesson_id" field if the given value is not nil.
func (cluo *CompletedLessonUpdateOne) SetNillableLessonID(u *uuid.UUID) *CompletedLessonUpdateOne {
	if u != nil {
		cluo.SetLessonID(*u)
	}
	return cluo
}

// ClearLessonID clears the value of the "lesson_id" field.
func (cluo *CompletedLessonUpdateOne) ClearLessonID() *CompletedLessonUpdateOne {
	cluo.mutation.ClearLessonID()
	return cluo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cluo *CompletedLessonUpdateOne) SetAuthorID(id uuid.UUID) *CompletedLessonUpdateOne {
	cluo.mutation.SetAuthorID(id)
	return cluo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (cluo *CompletedLessonUpdateOne) SetNillableAuthorID(id *uuid.UUID) *CompletedLessonUpdateOne {
	if id != nil {
		cluo = cluo.SetAuthorID(*id)
	}
	return cluo
}

// SetAuthor sets the "author" edge to the User entity.
func (cluo *CompletedLessonUpdateOne) SetAuthor(u *User) *CompletedLessonUpdateOne {
	return cluo.SetAuthorID(u.ID)
}

// SetCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID.
func (cluo *CompletedLessonUpdateOne) SetCompletedLessonID(id uuid.UUID) *CompletedLessonUpdateOne {
	cluo.mutation.SetCompletedLessonID(id)
	return cluo
}

// SetNillableCompletedLessonID sets the "completed_lesson" edge to the Lesson entity by ID if the given value is not nil.
func (cluo *CompletedLessonUpdateOne) SetNillableCompletedLessonID(id *uuid.UUID) *CompletedLessonUpdateOne {
	if id != nil {
		cluo = cluo.SetCompletedLessonID(*id)
	}
	return cluo
}

// SetCompletedLesson sets the "completed_lesson" edge to the Lesson entity.
func (cluo *CompletedLessonUpdateOne) SetCompletedLesson(l *Lesson) *CompletedLessonUpdateOne {
	return cluo.SetCompletedLessonID(l.ID)
}

// Mutation returns the CompletedLessonMutation object of the builder.
func (cluo *CompletedLessonUpdateOne) Mutation() *CompletedLessonMutation {
	return cluo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (cluo *CompletedLessonUpdateOne) ClearAuthor() *CompletedLessonUpdateOne {
	cluo.mutation.ClearAuthor()
	return cluo
}

// ClearCompletedLesson clears the "completed_lesson" edge to the Lesson entity.
func (cluo *CompletedLessonUpdateOne) ClearCompletedLesson() *CompletedLessonUpdateOne {
	cluo.mutation.ClearCompletedLesson()
	return cluo
}

// Where appends a list predicates to the CompletedLessonUpdate builder.
func (cluo *CompletedLessonUpdateOne) Where(ps ...predicate.CompletedLesson) *CompletedLessonUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CompletedLessonUpdateOne) Select(field string, fields ...string) *CompletedLessonUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CompletedLesson entity.
func (cluo *CompletedLessonUpdateOne) Save(ctx context.Context) (*CompletedLesson, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CompletedLessonUpdateOne) SaveX(ctx context.Context) *CompletedLesson {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CompletedLessonUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CompletedLessonUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *CompletedLessonUpdateOne) sqlSave(ctx context.Context) (_node *CompletedLesson, err error) {
	_spec := sqlgraph.NewUpdateSpec(completedlesson.Table, completedlesson.Columns, sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompletedLesson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, completedlesson.FieldID)
		for _, f := range fields {
			if !completedlesson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != completedlesson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cluo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.AuthorTable,
			Columns: []string{completedlesson.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.AuthorTable,
			Columns: []string{completedlesson.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.CompletedLessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.CompletedLessonTable,
			Columns: []string{completedlesson.CompletedLessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.CompletedLessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedlesson.CompletedLessonTable,
			Columns: []string{completedlesson.CompletedLessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompletedLesson{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedlesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
