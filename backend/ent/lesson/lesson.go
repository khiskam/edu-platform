// Code generated by ent, DO NOT EDIT.

package lesson

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lesson type in the database.
	Label = "lesson"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLayout holds the string denoting the layout field in the database.
	FieldLayout = "layout"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// EdgeCompletedLessons holds the string denoting the completed_lessons edge name in mutations.
	EdgeCompletedLessons = "completed_lessons"
	// EdgeLesson holds the string denoting the lesson edge name in mutations.
	EdgeLesson = "lesson"
	// Table holds the table name of the lesson in the database.
	Table = "lessons"
	// CompletedLessonsTable is the table that holds the completed_lessons relation/edge.
	CompletedLessonsTable = "completed_lessons"
	// CompletedLessonsInverseTable is the table name for the CompletedLesson entity.
	// It exists in this package in order to avoid circular dependency with the "completedlesson" package.
	CompletedLessonsInverseTable = "completed_lessons"
	// CompletedLessonsColumn is the table column denoting the completed_lessons relation/edge.
	CompletedLessonsColumn = "lesson_id"
	// LessonTable is the table that holds the lesson relation/edge.
	LessonTable = "lessons"
	// LessonInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	LessonInverseTable = "categories"
	// LessonColumn is the table column denoting the lesson relation/edge.
	LessonColumn = "category_id"
)

// Columns holds all SQL columns for lesson fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldLayout,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Lesson queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLayout orders the results by the layout field.
func ByLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayout, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByCompletedLessonsCount orders the results by completed_lessons count.
func ByCompletedLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompletedLessonsStep(), opts...)
	}
}

// ByCompletedLessons orders the results by completed_lessons terms.
func ByCompletedLessons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedLessonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonField orders the results by lesson field.
func ByLessonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonStep(), sql.OrderByField(field, opts...))
	}
}
func newCompletedLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedLessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompletedLessonsTable, CompletedLessonsColumn),
	)
}
func newLessonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LessonTable, LessonColumn),
	)
}
