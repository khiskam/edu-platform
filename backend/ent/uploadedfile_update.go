// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
)

// UploadedFileUpdate is the builder for updating UploadedFile entities.
type UploadedFileUpdate struct {
	config
	hooks    []Hook
	mutation *UploadedFileMutation
}

// Where appends a list predicates to the UploadedFileUpdate builder.
func (ufu *UploadedFileUpdate) Where(ps ...predicate.UploadedFile) *UploadedFileUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetFileName sets the "file_name" field.
func (ufu *UploadedFileUpdate) SetFileName(s string) *UploadedFileUpdate {
	ufu.mutation.SetFileName(s)
	return ufu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (ufu *UploadedFileUpdate) SetNillableFileName(s *string) *UploadedFileUpdate {
	if s != nil {
		ufu.SetFileName(*s)
	}
	return ufu
}

// SetContentType sets the "content_type" field.
func (ufu *UploadedFileUpdate) SetContentType(s string) *UploadedFileUpdate {
	ufu.mutation.SetContentType(s)
	return ufu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (ufu *UploadedFileUpdate) SetNillableContentType(s *string) *UploadedFileUpdate {
	if s != nil {
		ufu.SetContentType(*s)
	}
	return ufu
}

// SetSize sets the "size" field.
func (ufu *UploadedFileUpdate) SetSize(i int64) *UploadedFileUpdate {
	ufu.mutation.ResetSize()
	ufu.mutation.SetSize(i)
	return ufu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ufu *UploadedFileUpdate) SetNillableSize(i *int64) *UploadedFileUpdate {
	if i != nil {
		ufu.SetSize(*i)
	}
	return ufu
}

// AddSize adds i to the "size" field.
func (ufu *UploadedFileUpdate) AddSize(i int64) *UploadedFileUpdate {
	ufu.mutation.AddSize(i)
	return ufu
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ufu *UploadedFileUpdate) AddTaskIDs(ids ...uuid.UUID) *UploadedFileUpdate {
	ufu.mutation.AddTaskIDs(ids...)
	return ufu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ufu *UploadedFileUpdate) AddTasks(t ...*Task) *UploadedFileUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ufu.AddTaskIDs(ids...)
}

// Mutation returns the UploadedFileMutation object of the builder.
func (ufu *UploadedFileUpdate) Mutation() *UploadedFileMutation {
	return ufu.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ufu *UploadedFileUpdate) ClearTasks() *UploadedFileUpdate {
	ufu.mutation.ClearTasks()
	return ufu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ufu *UploadedFileUpdate) RemoveTaskIDs(ids ...uuid.UUID) *UploadedFileUpdate {
	ufu.mutation.RemoveTaskIDs(ids...)
	return ufu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ufu *UploadedFileUpdate) RemoveTasks(t ...*Task) *UploadedFileUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ufu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UploadedFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UploadedFileUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UploadedFileUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UploadedFileUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UploadedFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(uploadedfile.Table, uploadedfile.Columns, sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.FileName(); ok {
		_spec.SetField(uploadedfile.FieldFileName, field.TypeString, value)
	}
	if value, ok := ufu.mutation.ContentType(); ok {
		_spec.SetField(uploadedfile.FieldContentType, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Size(); ok {
		_spec.SetField(uploadedfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ufu.mutation.AddedSize(); ok {
		_spec.AddField(uploadedfile.FieldSize, field.TypeInt64, value)
	}
	if ufu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ufu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UploadedFileUpdateOne is the builder for updating a single UploadedFile entity.
type UploadedFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UploadedFileMutation
}

// SetFileName sets the "file_name" field.
func (ufuo *UploadedFileUpdateOne) SetFileName(s string) *UploadedFileUpdateOne {
	ufuo.mutation.SetFileName(s)
	return ufuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (ufuo *UploadedFileUpdateOne) SetNillableFileName(s *string) *UploadedFileUpdateOne {
	if s != nil {
		ufuo.SetFileName(*s)
	}
	return ufuo
}

// SetContentType sets the "content_type" field.
func (ufuo *UploadedFileUpdateOne) SetContentType(s string) *UploadedFileUpdateOne {
	ufuo.mutation.SetContentType(s)
	return ufuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (ufuo *UploadedFileUpdateOne) SetNillableContentType(s *string) *UploadedFileUpdateOne {
	if s != nil {
		ufuo.SetContentType(*s)
	}
	return ufuo
}

// SetSize sets the "size" field.
func (ufuo *UploadedFileUpdateOne) SetSize(i int64) *UploadedFileUpdateOne {
	ufuo.mutation.ResetSize()
	ufuo.mutation.SetSize(i)
	return ufuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ufuo *UploadedFileUpdateOne) SetNillableSize(i *int64) *UploadedFileUpdateOne {
	if i != nil {
		ufuo.SetSize(*i)
	}
	return ufuo
}

// AddSize adds i to the "size" field.
func (ufuo *UploadedFileUpdateOne) AddSize(i int64) *UploadedFileUpdateOne {
	ufuo.mutation.AddSize(i)
	return ufuo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ufuo *UploadedFileUpdateOne) AddTaskIDs(ids ...uuid.UUID) *UploadedFileUpdateOne {
	ufuo.mutation.AddTaskIDs(ids...)
	return ufuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ufuo *UploadedFileUpdateOne) AddTasks(t ...*Task) *UploadedFileUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ufuo.AddTaskIDs(ids...)
}

// Mutation returns the UploadedFileMutation object of the builder.
func (ufuo *UploadedFileUpdateOne) Mutation() *UploadedFileMutation {
	return ufuo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ufuo *UploadedFileUpdateOne) ClearTasks() *UploadedFileUpdateOne {
	ufuo.mutation.ClearTasks()
	return ufuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ufuo *UploadedFileUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *UploadedFileUpdateOne {
	ufuo.mutation.RemoveTaskIDs(ids...)
	return ufuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ufuo *UploadedFileUpdateOne) RemoveTasks(t ...*Task) *UploadedFileUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ufuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the UploadedFileUpdate builder.
func (ufuo *UploadedFileUpdateOne) Where(ps ...predicate.UploadedFile) *UploadedFileUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UploadedFileUpdateOne) Select(field string, fields ...string) *UploadedFileUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UploadedFile entity.
func (ufuo *UploadedFileUpdateOne) Save(ctx context.Context) (*UploadedFile, error) {
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UploadedFileUpdateOne) SaveX(ctx context.Context) *UploadedFile {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UploadedFileUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UploadedFileUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UploadedFileUpdateOne) sqlSave(ctx context.Context) (_node *UploadedFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(uploadedfile.Table, uploadedfile.Columns, sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UploadedFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uploadedfile.FieldID)
		for _, f := range fields {
			if !uploadedfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != uploadedfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.FileName(); ok {
		_spec.SetField(uploadedfile.FieldFileName, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.ContentType(); ok {
		_spec.SetField(uploadedfile.FieldContentType, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Size(); ok {
		_spec.SetField(uploadedfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ufuo.mutation.AddedSize(); ok {
		_spec.AddField(uploadedfile.FieldSize, field.TypeInt64, value)
	}
	if ufuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ufuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   uploadedfile.TasksTable,
			Columns: []string{uploadedfile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UploadedFile{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadedfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
