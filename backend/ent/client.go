// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// CompletedLesson is the client for interacting with the CompletedLesson builders.
	CompletedLesson *CompletedLessonClient
	// CompletedTask is the client for interacting with the CompletedTask builders.
	CompletedTask *CompletedTaskClient
	// Lesson is the client for interacting with the Lesson builders.
	Lesson *LessonClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// UploadedFile is the client for interacting with the UploadedFile builders.
	UploadedFile *UploadedFileClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Category = NewCategoryClient(c.config)
	c.CompletedLesson = NewCompletedLessonClient(c.config)
	c.CompletedTask = NewCompletedTaskClient(c.config)
	c.Lesson = NewLessonClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.UploadedFile = NewUploadedFileClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Category:        NewCategoryClient(cfg),
		CompletedLesson: NewCompletedLessonClient(cfg),
		CompletedTask:   NewCompletedTaskClient(cfg),
		Lesson:          NewLessonClient(cfg),
		Task:            NewTaskClient(cfg),
		UploadedFile:    NewUploadedFileClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Category:        NewCategoryClient(cfg),
		CompletedLesson: NewCompletedLessonClient(cfg),
		CompletedTask:   NewCompletedTaskClient(cfg),
		Lesson:          NewLessonClient(cfg),
		Task:            NewTaskClient(cfg),
		UploadedFile:    NewUploadedFileClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Category.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Category, c.CompletedLesson, c.CompletedTask, c.Lesson, c.Task,
		c.UploadedFile, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Category, c.CompletedLesson, c.CompletedTask, c.Lesson, c.Task,
		c.UploadedFile, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *CompletedLessonMutation:
		return c.CompletedLesson.mutate(ctx, m)
	case *CompletedTaskMutation:
		return c.CompletedTask.mutate(ctx, m)
	case *LessonMutation:
		return c.Lesson.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *UploadedFileMutation:
		return c.UploadedFile.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryClient) MapCreateBulk(slice any, setFunc func(*CategoryCreate, int)) *CategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryCreateBulk{err: fmt.Errorf("calling to CategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id uuid.UUID) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id uuid.UUID) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id uuid.UUID) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id uuid.UUID) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessons queries the lessons edge of a Category.
func (c *CategoryClient) QueryLessons(ca *Category) *LessonQuery {
	query := (&LessonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(lesson.Table, lesson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.LessonsTable, category.LessonsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Category.
func (c *CategoryClient) QueryTasks(ca *Category) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.TasksTable, category.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// CompletedLessonClient is a client for the CompletedLesson schema.
type CompletedLessonClient struct {
	config
}

// NewCompletedLessonClient returns a client for the CompletedLesson from the given config.
func NewCompletedLessonClient(c config) *CompletedLessonClient {
	return &CompletedLessonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `completedlesson.Hooks(f(g(h())))`.
func (c *CompletedLessonClient) Use(hooks ...Hook) {
	c.hooks.CompletedLesson = append(c.hooks.CompletedLesson, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `completedlesson.Intercept(f(g(h())))`.
func (c *CompletedLessonClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompletedLesson = append(c.inters.CompletedLesson, interceptors...)
}

// Create returns a builder for creating a CompletedLesson entity.
func (c *CompletedLessonClient) Create() *CompletedLessonCreate {
	mutation := newCompletedLessonMutation(c.config, OpCreate)
	return &CompletedLessonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompletedLesson entities.
func (c *CompletedLessonClient) CreateBulk(builders ...*CompletedLessonCreate) *CompletedLessonCreateBulk {
	return &CompletedLessonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompletedLessonClient) MapCreateBulk(slice any, setFunc func(*CompletedLessonCreate, int)) *CompletedLessonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompletedLessonCreateBulk{err: fmt.Errorf("calling to CompletedLessonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompletedLessonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompletedLessonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompletedLesson.
func (c *CompletedLessonClient) Update() *CompletedLessonUpdate {
	mutation := newCompletedLessonMutation(c.config, OpUpdate)
	return &CompletedLessonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompletedLessonClient) UpdateOne(cl *CompletedLesson) *CompletedLessonUpdateOne {
	mutation := newCompletedLessonMutation(c.config, OpUpdateOne, withCompletedLesson(cl))
	return &CompletedLessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompletedLessonClient) UpdateOneID(id uuid.UUID) *CompletedLessonUpdateOne {
	mutation := newCompletedLessonMutation(c.config, OpUpdateOne, withCompletedLessonID(id))
	return &CompletedLessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompletedLesson.
func (c *CompletedLessonClient) Delete() *CompletedLessonDelete {
	mutation := newCompletedLessonMutation(c.config, OpDelete)
	return &CompletedLessonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompletedLessonClient) DeleteOne(cl *CompletedLesson) *CompletedLessonDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompletedLessonClient) DeleteOneID(id uuid.UUID) *CompletedLessonDeleteOne {
	builder := c.Delete().Where(completedlesson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompletedLessonDeleteOne{builder}
}

// Query returns a query builder for CompletedLesson.
func (c *CompletedLessonClient) Query() *CompletedLessonQuery {
	return &CompletedLessonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompletedLesson},
		inters: c.Interceptors(),
	}
}

// Get returns a CompletedLesson entity by its id.
func (c *CompletedLessonClient) Get(ctx context.Context, id uuid.UUID) (*CompletedLesson, error) {
	return c.Query().Where(completedlesson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompletedLessonClient) GetX(ctx context.Context, id uuid.UUID) *CompletedLesson {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a CompletedLesson.
func (c *CompletedLessonClient) QueryAuthor(cl *CompletedLesson) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedlesson.Table, completedlesson.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedlesson.AuthorTable, completedlesson.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedLesson queries the completed_lesson edge of a CompletedLesson.
func (c *CompletedLessonClient) QueryCompletedLesson(cl *CompletedLesson) *LessonQuery {
	query := (&LessonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedlesson.Table, completedlesson.FieldID, id),
			sqlgraph.To(lesson.Table, lesson.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedlesson.CompletedLessonTable, completedlesson.CompletedLessonColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompletedLessonClient) Hooks() []Hook {
	return c.hooks.CompletedLesson
}

// Interceptors returns the client interceptors.
func (c *CompletedLessonClient) Interceptors() []Interceptor {
	return c.inters.CompletedLesson
}

func (c *CompletedLessonClient) mutate(ctx context.Context, m *CompletedLessonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompletedLessonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompletedLessonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompletedLessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompletedLessonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompletedLesson mutation op: %q", m.Op())
	}
}

// CompletedTaskClient is a client for the CompletedTask schema.
type CompletedTaskClient struct {
	config
}

// NewCompletedTaskClient returns a client for the CompletedTask from the given config.
func NewCompletedTaskClient(c config) *CompletedTaskClient {
	return &CompletedTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `completedtask.Hooks(f(g(h())))`.
func (c *CompletedTaskClient) Use(hooks ...Hook) {
	c.hooks.CompletedTask = append(c.hooks.CompletedTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `completedtask.Intercept(f(g(h())))`.
func (c *CompletedTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompletedTask = append(c.inters.CompletedTask, interceptors...)
}

// Create returns a builder for creating a CompletedTask entity.
func (c *CompletedTaskClient) Create() *CompletedTaskCreate {
	mutation := newCompletedTaskMutation(c.config, OpCreate)
	return &CompletedTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompletedTask entities.
func (c *CompletedTaskClient) CreateBulk(builders ...*CompletedTaskCreate) *CompletedTaskCreateBulk {
	return &CompletedTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompletedTaskClient) MapCreateBulk(slice any, setFunc func(*CompletedTaskCreate, int)) *CompletedTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompletedTaskCreateBulk{err: fmt.Errorf("calling to CompletedTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompletedTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompletedTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompletedTask.
func (c *CompletedTaskClient) Update() *CompletedTaskUpdate {
	mutation := newCompletedTaskMutation(c.config, OpUpdate)
	return &CompletedTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompletedTaskClient) UpdateOne(ct *CompletedTask) *CompletedTaskUpdateOne {
	mutation := newCompletedTaskMutation(c.config, OpUpdateOne, withCompletedTask(ct))
	return &CompletedTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompletedTaskClient) UpdateOneID(id uuid.UUID) *CompletedTaskUpdateOne {
	mutation := newCompletedTaskMutation(c.config, OpUpdateOne, withCompletedTaskID(id))
	return &CompletedTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompletedTask.
func (c *CompletedTaskClient) Delete() *CompletedTaskDelete {
	mutation := newCompletedTaskMutation(c.config, OpDelete)
	return &CompletedTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompletedTaskClient) DeleteOne(ct *CompletedTask) *CompletedTaskDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompletedTaskClient) DeleteOneID(id uuid.UUID) *CompletedTaskDeleteOne {
	builder := c.Delete().Where(completedtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompletedTaskDeleteOne{builder}
}

// Query returns a query builder for CompletedTask.
func (c *CompletedTaskClient) Query() *CompletedTaskQuery {
	return &CompletedTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompletedTask},
		inters: c.Interceptors(),
	}
}

// Get returns a CompletedTask entity by its id.
func (c *CompletedTaskClient) Get(ctx context.Context, id uuid.UUID) (*CompletedTask, error) {
	return c.Query().Where(completedtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompletedTaskClient) GetX(ctx context.Context, id uuid.UUID) *CompletedTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a CompletedTask.
func (c *CompletedTaskClient) QueryAuthor(ct *CompletedTask) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedtask.Table, completedtask.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedtask.AuthorTable, completedtask.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedTask queries the completed_task edge of a CompletedTask.
func (c *CompletedTaskClient) QueryCompletedTask(ct *CompletedTask) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(completedtask.Table, completedtask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, completedtask.CompletedTaskTable, completedtask.CompletedTaskColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompletedTaskClient) Hooks() []Hook {
	return c.hooks.CompletedTask
}

// Interceptors returns the client interceptors.
func (c *CompletedTaskClient) Interceptors() []Interceptor {
	return c.inters.CompletedTask
}

func (c *CompletedTaskClient) mutate(ctx context.Context, m *CompletedTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompletedTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompletedTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompletedTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompletedTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompletedTask mutation op: %q", m.Op())
	}
}

// LessonClient is a client for the Lesson schema.
type LessonClient struct {
	config
}

// NewLessonClient returns a client for the Lesson from the given config.
func NewLessonClient(c config) *LessonClient {
	return &LessonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lesson.Hooks(f(g(h())))`.
func (c *LessonClient) Use(hooks ...Hook) {
	c.hooks.Lesson = append(c.hooks.Lesson, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lesson.Intercept(f(g(h())))`.
func (c *LessonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lesson = append(c.inters.Lesson, interceptors...)
}

// Create returns a builder for creating a Lesson entity.
func (c *LessonClient) Create() *LessonCreate {
	mutation := newLessonMutation(c.config, OpCreate)
	return &LessonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lesson entities.
func (c *LessonClient) CreateBulk(builders ...*LessonCreate) *LessonCreateBulk {
	return &LessonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LessonClient) MapCreateBulk(slice any, setFunc func(*LessonCreate, int)) *LessonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LessonCreateBulk{err: fmt.Errorf("calling to LessonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LessonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LessonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lesson.
func (c *LessonClient) Update() *LessonUpdate {
	mutation := newLessonMutation(c.config, OpUpdate)
	return &LessonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonClient) UpdateOne(l *Lesson) *LessonUpdateOne {
	mutation := newLessonMutation(c.config, OpUpdateOne, withLesson(l))
	return &LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonClient) UpdateOneID(id uuid.UUID) *LessonUpdateOne {
	mutation := newLessonMutation(c.config, OpUpdateOne, withLessonID(id))
	return &LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lesson.
func (c *LessonClient) Delete() *LessonDelete {
	mutation := newLessonMutation(c.config, OpDelete)
	return &LessonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonClient) DeleteOne(l *Lesson) *LessonDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonClient) DeleteOneID(id uuid.UUID) *LessonDeleteOne {
	builder := c.Delete().Where(lesson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonDeleteOne{builder}
}

// Query returns a query builder for Lesson.
func (c *LessonClient) Query() *LessonQuery {
	return &LessonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLesson},
		inters: c.Interceptors(),
	}
}

// Get returns a Lesson entity by its id.
func (c *LessonClient) Get(ctx context.Context, id uuid.UUID) (*Lesson, error) {
	return c.Query().Where(lesson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonClient) GetX(ctx context.Context, id uuid.UUID) *Lesson {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompletedLessons queries the completed_lessons edge of a Lesson.
func (c *LessonClient) QueryCompletedLessons(l *Lesson) *CompletedLessonQuery {
	query := (&CompletedLessonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lesson.Table, lesson.FieldID, id),
			sqlgraph.To(completedlesson.Table, completedlesson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lesson.CompletedLessonsTable, lesson.CompletedLessonsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLesson queries the lesson edge of a Lesson.
func (c *LessonClient) QueryLesson(l *Lesson) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lesson.Table, lesson.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lesson.LessonTable, lesson.LessonColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonClient) Hooks() []Hook {
	return c.hooks.Lesson
}

// Interceptors returns the client interceptors.
func (c *LessonClient) Interceptors() []Interceptor {
	return c.inters.Lesson
}

func (c *LessonClient) mutate(ctx context.Context, m *LessonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lesson mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a Task.
func (c *TaskClient) QueryTask(t *Task) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.TaskTable, task.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUploadedFile queries the uploaded_file edge of a Task.
func (c *TaskClient) QueryUploadedFile(t *Task) *UploadedFileQuery {
	query := (&UploadedFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(uploadedfile.Table, uploadedfile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.UploadedFileTable, task.UploadedFileColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedTasks queries the completed_tasks edge of a Task.
func (c *TaskClient) QueryCompletedTasks(t *Task) *CompletedTaskQuery {
	query := (&CompletedTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(completedtask.Table, completedtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.CompletedTasksTable, task.CompletedTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// UploadedFileClient is a client for the UploadedFile schema.
type UploadedFileClient struct {
	config
}

// NewUploadedFileClient returns a client for the UploadedFile from the given config.
func NewUploadedFileClient(c config) *UploadedFileClient {
	return &UploadedFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uploadedfile.Hooks(f(g(h())))`.
func (c *UploadedFileClient) Use(hooks ...Hook) {
	c.hooks.UploadedFile = append(c.hooks.UploadedFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uploadedfile.Intercept(f(g(h())))`.
func (c *UploadedFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UploadedFile = append(c.inters.UploadedFile, interceptors...)
}

// Create returns a builder for creating a UploadedFile entity.
func (c *UploadedFileClient) Create() *UploadedFileCreate {
	mutation := newUploadedFileMutation(c.config, OpCreate)
	return &UploadedFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UploadedFile entities.
func (c *UploadedFileClient) CreateBulk(builders ...*UploadedFileCreate) *UploadedFileCreateBulk {
	return &UploadedFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UploadedFileClient) MapCreateBulk(slice any, setFunc func(*UploadedFileCreate, int)) *UploadedFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UploadedFileCreateBulk{err: fmt.Errorf("calling to UploadedFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UploadedFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UploadedFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UploadedFile.
func (c *UploadedFileClient) Update() *UploadedFileUpdate {
	mutation := newUploadedFileMutation(c.config, OpUpdate)
	return &UploadedFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UploadedFileClient) UpdateOne(uf *UploadedFile) *UploadedFileUpdateOne {
	mutation := newUploadedFileMutation(c.config, OpUpdateOne, withUploadedFile(uf))
	return &UploadedFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UploadedFileClient) UpdateOneID(id uuid.UUID) *UploadedFileUpdateOne {
	mutation := newUploadedFileMutation(c.config, OpUpdateOne, withUploadedFileID(id))
	return &UploadedFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UploadedFile.
func (c *UploadedFileClient) Delete() *UploadedFileDelete {
	mutation := newUploadedFileMutation(c.config, OpDelete)
	return &UploadedFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UploadedFileClient) DeleteOne(uf *UploadedFile) *UploadedFileDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UploadedFileClient) DeleteOneID(id uuid.UUID) *UploadedFileDeleteOne {
	builder := c.Delete().Where(uploadedfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UploadedFileDeleteOne{builder}
}

// Query returns a query builder for UploadedFile.
func (c *UploadedFileClient) Query() *UploadedFileQuery {
	return &UploadedFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUploadedFile},
		inters: c.Interceptors(),
	}
}

// Get returns a UploadedFile entity by its id.
func (c *UploadedFileClient) Get(ctx context.Context, id uuid.UUID) (*UploadedFile, error) {
	return c.Query().Where(uploadedfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UploadedFileClient) GetX(ctx context.Context, id uuid.UUID) *UploadedFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTasks queries the tasks edge of a UploadedFile.
func (c *UploadedFileClient) QueryTasks(uf *UploadedFile) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uploadedfile.Table, uploadedfile.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, uploadedfile.TasksTable, uploadedfile.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UploadedFileClient) Hooks() []Hook {
	return c.hooks.UploadedFile
}

// Interceptors returns the client interceptors.
func (c *UploadedFileClient) Interceptors() []Interceptor {
	return c.inters.UploadedFile
}

func (c *UploadedFileClient) mutate(ctx context.Context, m *UploadedFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UploadedFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UploadedFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UploadedFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UploadedFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UploadedFile mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompletedLessons queries the completed_lessons edge of a User.
func (c *UserClient) QueryCompletedLessons(u *User) *CompletedLessonQuery {
	query := (&CompletedLessonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(completedlesson.Table, completedlesson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CompletedLessonsTable, user.CompletedLessonsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompletedTasks queries the completed_tasks edge of a User.
func (c *UserClient) QueryCompletedTasks(u *User) *CompletedTaskQuery {
	query := (&CompletedTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(completedtask.Table, completedtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CompletedTasksTable, user.CompletedTasksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Category, CompletedLesson, CompletedTask, Lesson, Task, UploadedFile,
		User []ent.Hook
	}
	inters struct {
		Category, CompletedLesson, CompletedTask, Lesson, Task, UploadedFile,
		User []ent.Interceptor
	}
)
