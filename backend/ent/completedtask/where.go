// Code generated by ent, DO NOT EDIT.

package completedtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldLTE(FieldID, id))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldAnswer, v))
}

// IsCompleted applies equality check predicate on the "is_completed" field. It's identical to IsCompletedEQ.
func IsCompleted(v bool) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldIsCompleted, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldUserID, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldTaskID, v))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldContainsFold(FieldAnswer, v))
}

// IsCompletedEQ applies the EQ predicate on the "is_completed" field.
func IsCompletedEQ(v bool) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldIsCompleted, v))
}

// IsCompletedNEQ applies the NEQ predicate on the "is_completed" field.
func IsCompletedNEQ(v bool) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNEQ(FieldIsCompleted, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotNull(FieldUserID))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uuid.UUID) predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldIsNull(FieldTaskID))
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.CompletedTask {
	return predicate.CompletedTask(sql.FieldNotNull(FieldTaskID))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.CompletedTask {
	return predicate.CompletedTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.CompletedTask {
	return predicate.CompletedTask(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompletedTask applies the HasEdge predicate on the "completed_task" edge.
func HasCompletedTask() predicate.CompletedTask {
	return predicate.CompletedTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompletedTaskTable, CompletedTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompletedTaskWith applies the HasEdge predicate on the "completed_task" edge with a given conditions (other predicates).
func HasCompletedTaskWith(preds ...predicate.Task) predicate.CompletedTask {
	return predicate.CompletedTask(func(s *sql.Selector) {
		step := newCompletedTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompletedTask) predicate.CompletedTask {
	return predicate.CompletedTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompletedTask) predicate.CompletedTask {
	return predicate.CompletedTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompletedTask) predicate.CompletedTask {
	return predicate.CompletedTask(sql.NotPredicates(p))
}
