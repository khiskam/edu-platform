// Code generated by ent, DO NOT EDIT.

package completedtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the completedtask type in the database.
	Label = "completed_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnswer holds the string denoting the answer field in the database.
	FieldAnswer = "answer"
	// FieldIsCompleted holds the string denoting the is_completed field in the database.
	FieldIsCompleted = "is_completed"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeCompletedTask holds the string denoting the completed_task edge name in mutations.
	EdgeCompletedTask = "completed_task"
	// Table holds the table name of the completedtask in the database.
	Table = "completed_tasks"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "completed_tasks"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_id"
	// CompletedTaskTable is the table that holds the completed_task relation/edge.
	CompletedTaskTable = "completed_tasks"
	// CompletedTaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	CompletedTaskInverseTable = "tasks"
	// CompletedTaskColumn is the table column denoting the completed_task relation/edge.
	CompletedTaskColumn = "task_id"
)

// Columns holds all SQL columns for completedtask fields.
var Columns = []string{
	FieldID,
	FieldAnswer,
	FieldIsCompleted,
	FieldUserID,
	FieldTaskID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CompletedTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAnswer orders the results by the answer field.
func ByAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswer, opts...).ToFunc()
}

// ByIsCompleted orders the results by the is_completed field.
func ByIsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCompleted, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompletedTaskField orders the results by completed_task field.
func ByCompletedTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newCompletedTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompletedTaskTable, CompletedTaskColumn),
	)
}
