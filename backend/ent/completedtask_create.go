// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedTaskCreate is the builder for creating a CompletedTask entity.
type CompletedTaskCreate struct {
	config
	mutation *CompletedTaskMutation
	hooks    []Hook
}

// SetAnswer sets the "answer" field.
func (ctc *CompletedTaskCreate) SetAnswer(s string) *CompletedTaskCreate {
	ctc.mutation.SetAnswer(s)
	return ctc
}

// SetIsCompleted sets the "is_completed" field.
func (ctc *CompletedTaskCreate) SetIsCompleted(b bool) *CompletedTaskCreate {
	ctc.mutation.SetIsCompleted(b)
	return ctc
}

// SetUserID sets the "user_id" field.
func (ctc *CompletedTaskCreate) SetUserID(u uuid.UUID) *CompletedTaskCreate {
	ctc.mutation.SetUserID(u)
	return ctc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ctc *CompletedTaskCreate) SetNillableUserID(u *uuid.UUID) *CompletedTaskCreate {
	if u != nil {
		ctc.SetUserID(*u)
	}
	return ctc
}

// SetTaskID sets the "task_id" field.
func (ctc *CompletedTaskCreate) SetTaskID(u uuid.UUID) *CompletedTaskCreate {
	ctc.mutation.SetTaskID(u)
	return ctc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ctc *CompletedTaskCreate) SetNillableTaskID(u *uuid.UUID) *CompletedTaskCreate {
	if u != nil {
		ctc.SetTaskID(*u)
	}
	return ctc
}

// SetID sets the "id" field.
func (ctc *CompletedTaskCreate) SetID(u uuid.UUID) *CompletedTaskCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (ctc *CompletedTaskCreate) SetAuthorID(id uuid.UUID) *CompletedTaskCreate {
	ctc.mutation.SetAuthorID(id)
	return ctc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (ctc *CompletedTaskCreate) SetNillableAuthorID(id *uuid.UUID) *CompletedTaskCreate {
	if id != nil {
		ctc = ctc.SetAuthorID(*id)
	}
	return ctc
}

// SetAuthor sets the "author" edge to the User entity.
func (ctc *CompletedTaskCreate) SetAuthor(u *User) *CompletedTaskCreate {
	return ctc.SetAuthorID(u.ID)
}

// SetCompletedTaskID sets the "completed_task" edge to the Task entity by ID.
func (ctc *CompletedTaskCreate) SetCompletedTaskID(id uuid.UUID) *CompletedTaskCreate {
	ctc.mutation.SetCompletedTaskID(id)
	return ctc
}

// SetNillableCompletedTaskID sets the "completed_task" edge to the Task entity by ID if the given value is not nil.
func (ctc *CompletedTaskCreate) SetNillableCompletedTaskID(id *uuid.UUID) *CompletedTaskCreate {
	if id != nil {
		ctc = ctc.SetCompletedTaskID(*id)
	}
	return ctc
}

// SetCompletedTask sets the "completed_task" edge to the Task entity.
func (ctc *CompletedTaskCreate) SetCompletedTask(t *Task) *CompletedTaskCreate {
	return ctc.SetCompletedTaskID(t.ID)
}

// Mutation returns the CompletedTaskMutation object of the builder.
func (ctc *CompletedTaskCreate) Mutation() *CompletedTaskMutation {
	return ctc.mutation
}

// Save creates the CompletedTask in the database.
func (ctc *CompletedTaskCreate) Save(ctx context.Context) (*CompletedTask, error) {
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CompletedTaskCreate) SaveX(ctx context.Context) *CompletedTask {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CompletedTaskCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CompletedTaskCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CompletedTaskCreate) check() error {
	if _, ok := ctc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "CompletedTask.answer"`)}
	}
	if _, ok := ctc.mutation.IsCompleted(); !ok {
		return &ValidationError{Name: "is_completed", err: errors.New(`ent: missing required field "CompletedTask.is_completed"`)}
	}
	return nil
}

func (ctc *CompletedTaskCreate) sqlSave(ctx context.Context) (*CompletedTask, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CompletedTaskCreate) createSpec() (*CompletedTask, *sqlgraph.CreateSpec) {
	var (
		_node = &CompletedTask{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(completedtask.Table, sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID))
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.Answer(); ok {
		_spec.SetField(completedtask.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if value, ok := ctc.mutation.IsCompleted(); ok {
		_spec.SetField(completedtask.FieldIsCompleted, field.TypeBool, value)
		_node.IsCompleted = value
	}
	if nodes := ctc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.AuthorTable,
			Columns: []string{completedtask.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.CompletedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.CompletedTaskTable,
			Columns: []string{completedtask.CompletedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompletedTaskCreateBulk is the builder for creating many CompletedTask entities in bulk.
type CompletedTaskCreateBulk struct {
	config
	err      error
	builders []*CompletedTaskCreate
}

// Save creates the CompletedTask entities in the database.
func (ctcb *CompletedTaskCreateBulk) Save(ctx context.Context) ([]*CompletedTask, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CompletedTask, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompletedTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CompletedTaskCreateBulk) SaveX(ctx context.Context) []*CompletedTask {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CompletedTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CompletedTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
