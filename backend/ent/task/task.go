// Code generated by ent, DO NOT EDIT.

package task

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAnswer holds the string denoting the answer field in the database.
	FieldAnswer = "answer"
	// FieldUploadedFileID holds the string denoting the uploaded_file_id field in the database.
	FieldUploadedFileID = "uploaded_file_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeUploadedFile holds the string denoting the uploaded_file edge name in mutations.
	EdgeUploadedFile = "uploaded_file"
	// EdgeCompletedTasks holds the string denoting the completed_tasks edge name in mutations.
	EdgeCompletedTasks = "completed_tasks"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "tasks"
	// TaskInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	TaskInverseTable = "categories"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "category_id"
	// UploadedFileTable is the table that holds the uploaded_file relation/edge.
	UploadedFileTable = "tasks"
	// UploadedFileInverseTable is the table name for the UploadedFile entity.
	// It exists in this package in order to avoid circular dependency with the "uploadedfile" package.
	UploadedFileInverseTable = "uploaded_files"
	// UploadedFileColumn is the table column denoting the uploaded_file relation/edge.
	UploadedFileColumn = "uploaded_file_id"
	// CompletedTasksTable is the table that holds the completed_tasks relation/edge.
	CompletedTasksTable = "completed_tasks"
	// CompletedTasksInverseTable is the table name for the CompletedTask entity.
	// It exists in this package in order to avoid circular dependency with the "completedtask" package.
	CompletedTasksInverseTable = "completed_tasks"
	// CompletedTasksColumn is the table column denoting the completed_tasks relation/edge.
	CompletedTasksColumn = "task_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldAnswer,
	FieldUploadedFileID,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAnswer orders the results by the answer field.
func ByAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswer, opts...).ToFunc()
}

// ByUploadedFileID orders the results by the uploaded_file_id field.
func ByUploadedFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedFileID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByUploadedFileField orders the results by uploaded_file field.
func ByUploadedFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadedFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompletedTasksCount orders the results by completed_tasks count.
func ByCompletedTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompletedTasksStep(), opts...)
	}
}

// ByCompletedTasks orders the results by completed_tasks terms.
func ByCompletedTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompletedTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newUploadedFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadedFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploadedFileTable, UploadedFileColumn),
	)
}
func newCompletedTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompletedTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompletedTasksTable, CompletedTasksColumn),
	)
}
