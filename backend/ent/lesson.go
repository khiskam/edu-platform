// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
)

// Lesson is the model entity for the Lesson schema.
type Lesson struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Layout holds the value of the "layout" field.
	Layout string `json:"layout,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonQuery when eager-loading is set.
	Edges        LessonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LessonEdges holds the relations/edges for other nodes in the graph.
type LessonEdges struct {
	// CompletedLessons holds the value of the completed_lessons edge.
	CompletedLessons []*CompletedLesson `json:"completed_lessons,omitempty"`
	// Lesson holds the value of the lesson edge.
	Lesson *Category `json:"lesson,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompletedLessonsOrErr returns the CompletedLessons value or an error if the edge
// was not loaded in eager-loading.
func (e LessonEdges) CompletedLessonsOrErr() ([]*CompletedLesson, error) {
	if e.loadedTypes[0] {
		return e.CompletedLessons, nil
	}
	return nil, &NotLoadedError{edge: "completed_lessons"}
}

// LessonOrErr returns the Lesson value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonEdges) LessonOrErr() (*Category, error) {
	if e.Lesson != nil {
		return e.Lesson, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "lesson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lesson) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lesson.FieldTitle, lesson.FieldDescription, lesson.FieldLayout:
			values[i] = new(sql.NullString)
		case lesson.FieldID, lesson.FieldCategoryID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lesson fields.
func (l *Lesson) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case lesson.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				l.Title = value.String
			}
		case lesson.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				l.Description = value.String
			}
		case lesson.FieldLayout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field layout", values[i])
			} else if value.Valid {
				l.Layout = value.String
			}
		case lesson.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				l.CategoryID = *value
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lesson.
// This includes values selected through modifiers, order, etc.
func (l *Lesson) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryCompletedLessons queries the "completed_lessons" edge of the Lesson entity.
func (l *Lesson) QueryCompletedLessons() *CompletedLessonQuery {
	return NewLessonClient(l.config).QueryCompletedLessons(l)
}

// QueryLesson queries the "lesson" edge of the Lesson entity.
func (l *Lesson) QueryLesson() *CategoryQuery {
	return NewLessonClient(l.config).QueryLesson(l)
}

// Update returns a builder for updating this Lesson.
// Note that you need to call Lesson.Unwrap() before calling this method if this Lesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lesson) Update() *LessonUpdateOne {
	return NewLessonClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lesson) Unwrap() *Lesson {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lesson is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lesson) String() string {
	var builder strings.Builder
	builder.WriteString("Lesson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("title=")
	builder.WriteString(l.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(l.Description)
	builder.WriteString(", ")
	builder.WriteString("layout=")
	builder.WriteString(l.Layout)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", l.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Lessons is a parsable slice of Lesson.
type Lessons []*Lesson
