// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
)

// UploadedFileQuery is the builder for querying UploadedFile entities.
type UploadedFileQuery struct {
	config
	ctx        *QueryContext
	order      []uploadedfile.OrderOption
	inters     []Interceptor
	predicates []predicate.UploadedFile
	withTasks  *TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UploadedFileQuery builder.
func (ufq *UploadedFileQuery) Where(ps ...predicate.UploadedFile) *UploadedFileQuery {
	ufq.predicates = append(ufq.predicates, ps...)
	return ufq
}

// Limit the number of records to be returned by this query.
func (ufq *UploadedFileQuery) Limit(limit int) *UploadedFileQuery {
	ufq.ctx.Limit = &limit
	return ufq
}

// Offset to start from.
func (ufq *UploadedFileQuery) Offset(offset int) *UploadedFileQuery {
	ufq.ctx.Offset = &offset
	return ufq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ufq *UploadedFileQuery) Unique(unique bool) *UploadedFileQuery {
	ufq.ctx.Unique = &unique
	return ufq
}

// Order specifies how the records should be ordered.
func (ufq *UploadedFileQuery) Order(o ...uploadedfile.OrderOption) *UploadedFileQuery {
	ufq.order = append(ufq.order, o...)
	return ufq
}

// QueryTasks chains the current query on the "tasks" edge.
func (ufq *UploadedFileQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: ufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(uploadedfile.Table, uploadedfile.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, uploadedfile.TasksTable, uploadedfile.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UploadedFile entity from the query.
// Returns a *NotFoundError when no UploadedFile was found.
func (ufq *UploadedFileQuery) First(ctx context.Context) (*UploadedFile, error) {
	nodes, err := ufq.Limit(1).All(setContextOp(ctx, ufq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{uploadedfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ufq *UploadedFileQuery) FirstX(ctx context.Context) *UploadedFile {
	node, err := ufq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UploadedFile ID from the query.
// Returns a *NotFoundError when no UploadedFile ID was found.
func (ufq *UploadedFileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ufq.Limit(1).IDs(setContextOp(ctx, ufq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{uploadedfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ufq *UploadedFileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ufq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UploadedFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UploadedFile entity is found.
// Returns a *NotFoundError when no UploadedFile entities are found.
func (ufq *UploadedFileQuery) Only(ctx context.Context) (*UploadedFile, error) {
	nodes, err := ufq.Limit(2).All(setContextOp(ctx, ufq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{uploadedfile.Label}
	default:
		return nil, &NotSingularError{uploadedfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ufq *UploadedFileQuery) OnlyX(ctx context.Context) *UploadedFile {
	node, err := ufq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UploadedFile ID in the query.
// Returns a *NotSingularError when more than one UploadedFile ID is found.
// Returns a *NotFoundError when no entities are found.
func (ufq *UploadedFileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ufq.Limit(2).IDs(setContextOp(ctx, ufq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{uploadedfile.Label}
	default:
		err = &NotSingularError{uploadedfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ufq *UploadedFileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ufq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UploadedFiles.
func (ufq *UploadedFileQuery) All(ctx context.Context) ([]*UploadedFile, error) {
	ctx = setContextOp(ctx, ufq.ctx, "All")
	if err := ufq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UploadedFile, *UploadedFileQuery]()
	return withInterceptors[[]*UploadedFile](ctx, ufq, qr, ufq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ufq *UploadedFileQuery) AllX(ctx context.Context) []*UploadedFile {
	nodes, err := ufq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UploadedFile IDs.
func (ufq *UploadedFileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ufq.ctx.Unique == nil && ufq.path != nil {
		ufq.Unique(true)
	}
	ctx = setContextOp(ctx, ufq.ctx, "IDs")
	if err = ufq.Select(uploadedfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ufq *UploadedFileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ufq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ufq *UploadedFileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ufq.ctx, "Count")
	if err := ufq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ufq, querierCount[*UploadedFileQuery](), ufq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ufq *UploadedFileQuery) CountX(ctx context.Context) int {
	count, err := ufq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ufq *UploadedFileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ufq.ctx, "Exist")
	switch _, err := ufq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ufq *UploadedFileQuery) ExistX(ctx context.Context) bool {
	exist, err := ufq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UploadedFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ufq *UploadedFileQuery) Clone() *UploadedFileQuery {
	if ufq == nil {
		return nil
	}
	return &UploadedFileQuery{
		config:     ufq.config,
		ctx:        ufq.ctx.Clone(),
		order:      append([]uploadedfile.OrderOption{}, ufq.order...),
		inters:     append([]Interceptor{}, ufq.inters...),
		predicates: append([]predicate.UploadedFile{}, ufq.predicates...),
		withTasks:  ufq.withTasks.Clone(),
		// clone intermediate query.
		sql:  ufq.sql.Clone(),
		path: ufq.path,
	}
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ufq *UploadedFileQuery) WithTasks(opts ...func(*TaskQuery)) *UploadedFileQuery {
	query := (&TaskClient{config: ufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufq.withTasks = query
	return ufq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FileName string `json:"file_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UploadedFile.Query().
//		GroupBy(uploadedfile.FieldFileName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ufq *UploadedFileQuery) GroupBy(field string, fields ...string) *UploadedFileGroupBy {
	ufq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UploadedFileGroupBy{build: ufq}
	grbuild.flds = &ufq.ctx.Fields
	grbuild.label = uploadedfile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FileName string `json:"file_name,omitempty"`
//	}
//
//	client.UploadedFile.Query().
//		Select(uploadedfile.FieldFileName).
//		Scan(ctx, &v)
func (ufq *UploadedFileQuery) Select(fields ...string) *UploadedFileSelect {
	ufq.ctx.Fields = append(ufq.ctx.Fields, fields...)
	sbuild := &UploadedFileSelect{UploadedFileQuery: ufq}
	sbuild.label = uploadedfile.Label
	sbuild.flds, sbuild.scan = &ufq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UploadedFileSelect configured with the given aggregations.
func (ufq *UploadedFileQuery) Aggregate(fns ...AggregateFunc) *UploadedFileSelect {
	return ufq.Select().Aggregate(fns...)
}

func (ufq *UploadedFileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ufq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ufq); err != nil {
				return err
			}
		}
	}
	for _, f := range ufq.ctx.Fields {
		if !uploadedfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ufq.path != nil {
		prev, err := ufq.path(ctx)
		if err != nil {
			return err
		}
		ufq.sql = prev
	}
	return nil
}

func (ufq *UploadedFileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UploadedFile, error) {
	var (
		nodes       = []*UploadedFile{}
		_spec       = ufq.querySpec()
		loadedTypes = [1]bool{
			ufq.withTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UploadedFile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UploadedFile{config: ufq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ufq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ufq.withTasks; query != nil {
		if err := ufq.loadTasks(ctx, query, nodes,
			func(n *UploadedFile) { n.Edges.Tasks = []*Task{} },
			func(n *UploadedFile, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ufq *UploadedFileQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*UploadedFile, init func(*UploadedFile), assign func(*UploadedFile, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*UploadedFile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldUploadedFileID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(uploadedfile.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UploadedFileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "uploaded_file_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ufq *UploadedFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ufq.querySpec()
	_spec.Node.Columns = ufq.ctx.Fields
	if len(ufq.ctx.Fields) > 0 {
		_spec.Unique = ufq.ctx.Unique != nil && *ufq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ufq.driver, _spec)
}

func (ufq *UploadedFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(uploadedfile.Table, uploadedfile.Columns, sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID))
	_spec.From = ufq.sql
	if unique := ufq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ufq.path != nil {
		_spec.Unique = true
	}
	if fields := ufq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uploadedfile.FieldID)
		for i := range fields {
			if fields[i] != uploadedfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ufq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ufq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ufq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ufq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ufq *UploadedFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ufq.driver.Dialect())
	t1 := builder.Table(uploadedfile.Table)
	columns := ufq.ctx.Fields
	if len(columns) == 0 {
		columns = uploadedfile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ufq.sql != nil {
		selector = ufq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ufq.ctx.Unique != nil && *ufq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ufq.predicates {
		p(selector)
	}
	for _, p := range ufq.order {
		p(selector)
	}
	if offset := ufq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ufq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UploadedFileGroupBy is the group-by builder for UploadedFile entities.
type UploadedFileGroupBy struct {
	selector
	build *UploadedFileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ufgb *UploadedFileGroupBy) Aggregate(fns ...AggregateFunc) *UploadedFileGroupBy {
	ufgb.fns = append(ufgb.fns, fns...)
	return ufgb
}

// Scan applies the selector query and scans the result into the given value.
func (ufgb *UploadedFileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufgb.build.ctx, "GroupBy")
	if err := ufgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UploadedFileQuery, *UploadedFileGroupBy](ctx, ufgb.build, ufgb, ufgb.build.inters, v)
}

func (ufgb *UploadedFileGroupBy) sqlScan(ctx context.Context, root *UploadedFileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ufgb.fns))
	for _, fn := range ufgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ufgb.flds)+len(ufgb.fns))
		for _, f := range *ufgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ufgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UploadedFileSelect is the builder for selecting fields of UploadedFile entities.
type UploadedFileSelect struct {
	*UploadedFileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ufs *UploadedFileSelect) Aggregate(fns ...AggregateFunc) *UploadedFileSelect {
	ufs.fns = append(ufs.fns, fns...)
	return ufs
}

// Scan applies the selector query and scans the result into the given value.
func (ufs *UploadedFileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufs.ctx, "Select")
	if err := ufs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UploadedFileQuery, *UploadedFileSelect](ctx, ufs.UploadedFileQuery, ufs, ufs.inters, v)
}

func (ufs *UploadedFileSelect) sqlScan(ctx context.Context, root *UploadedFileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ufs.fns))
	for _, fn := range ufs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ufs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
