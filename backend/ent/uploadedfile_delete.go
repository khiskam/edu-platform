// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/uploadedfile"
)

// UploadedFileDelete is the builder for deleting a UploadedFile entity.
type UploadedFileDelete struct {
	config
	hooks    []Hook
	mutation *UploadedFileMutation
}

// Where appends a list predicates to the UploadedFileDelete builder.
func (ufd *UploadedFileDelete) Where(ps ...predicate.UploadedFile) *UploadedFileDelete {
	ufd.mutation.Where(ps...)
	return ufd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufd *UploadedFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufd.sqlExec, ufd.mutation, ufd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufd *UploadedFileDelete) ExecX(ctx context.Context) int {
	n, err := ufd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufd *UploadedFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(uploadedfile.Table, sqlgraph.NewFieldSpec(uploadedfile.FieldID, field.TypeUUID))
	if ps := ufd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufd.mutation.done = true
	return affected, err
}

// UploadedFileDeleteOne is the builder for deleting a single UploadedFile entity.
type UploadedFileDeleteOne struct {
	ufd *UploadedFileDelete
}

// Where appends a list predicates to the UploadedFileDelete builder.
func (ufdo *UploadedFileDeleteOne) Where(ps ...predicate.UploadedFile) *UploadedFileDeleteOne {
	ufdo.ufd.mutation.Where(ps...)
	return ufdo
}

// Exec executes the deletion query.
func (ufdo *UploadedFileDeleteOne) Exec(ctx context.Context) error {
	n, err := ufdo.ufd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{uploadedfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufdo *UploadedFileDeleteOne) ExecX(ctx context.Context) {
	if err := ufdo.Exec(ctx); err != nil {
		panic(err)
	}
}
