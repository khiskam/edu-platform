// Code generated by ent, DO NOT EDIT.

package completedlesson

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldUserID, v))
}

// LessonID applies equality check predicate on the "lesson_id" field. It's identical to LessonIDEQ.
func LessonID(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldLessonID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNotNull(FieldUserID))
}

// LessonIDEQ applies the EQ predicate on the "lesson_id" field.
func LessonIDEQ(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldEQ(FieldLessonID, v))
}

// LessonIDNEQ applies the NEQ predicate on the "lesson_id" field.
func LessonIDNEQ(v uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNEQ(FieldLessonID, v))
}

// LessonIDIn applies the In predicate on the "lesson_id" field.
func LessonIDIn(vs ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldIn(FieldLessonID, vs...))
}

// LessonIDNotIn applies the NotIn predicate on the "lesson_id" field.
func LessonIDNotIn(vs ...uuid.UUID) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNotIn(FieldLessonID, vs...))
}

// LessonIDIsNil applies the IsNil predicate on the "lesson_id" field.
func LessonIDIsNil() predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldIsNull(FieldLessonID))
}

// LessonIDNotNil applies the NotNil predicate on the "lesson_id" field.
func LessonIDNotNil() predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.FieldNotNull(FieldLessonID))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.CompletedLesson {
	return predicate.CompletedLesson(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.CompletedLesson {
	return predicate.CompletedLesson(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompletedLesson applies the HasEdge predicate on the "completed_lesson" edge.
func HasCompletedLesson() predicate.CompletedLesson {
	return predicate.CompletedLesson(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompletedLessonTable, CompletedLessonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompletedLessonWith applies the HasEdge predicate on the "completed_lesson" edge with a given conditions (other predicates).
func HasCompletedLessonWith(preds ...predicate.Lesson) predicate.CompletedLesson {
	return predicate.CompletedLesson(func(s *sql.Selector) {
		step := newCompletedLessonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompletedLesson) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompletedLesson) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompletedLesson) predicate.CompletedLesson {
	return predicate.CompletedLesson(sql.NotPredicates(p))
}
