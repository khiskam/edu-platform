// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedTask is the model entity for the CompletedTask schema.
type CompletedTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// IsCompleted holds the value of the "is_completed" field.
	IsCompleted bool `json:"is_completed,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompletedTaskQuery when eager-loading is set.
	Edges        CompletedTaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompletedTaskEdges holds the relations/edges for other nodes in the graph.
type CompletedTaskEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// CompletedTask holds the value of the completed_task edge.
	CompletedTask *Task `json:"completed_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedTaskEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// CompletedTaskOrErr returns the CompletedTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedTaskEdges) CompletedTaskOrErr() (*Task, error) {
	if e.CompletedTask != nil {
		return e.CompletedTask, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "completed_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompletedTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case completedtask.FieldIsCompleted:
			values[i] = new(sql.NullBool)
		case completedtask.FieldAnswer:
			values[i] = new(sql.NullString)
		case completedtask.FieldID, completedtask.FieldUserID, completedtask.FieldTaskID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompletedTask fields.
func (ct *CompletedTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case completedtask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ct.ID = *value
			}
		case completedtask.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				ct.Answer = value.String
			}
		case completedtask.FieldIsCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_completed", values[i])
			} else if value.Valid {
				ct.IsCompleted = value.Bool
			}
		case completedtask.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ct.UserID = *value
			}
		case completedtask.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				ct.TaskID = *value
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompletedTask.
// This includes values selected through modifiers, order, etc.
func (ct *CompletedTask) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the CompletedTask entity.
func (ct *CompletedTask) QueryAuthor() *UserQuery {
	return NewCompletedTaskClient(ct.config).QueryAuthor(ct)
}

// QueryCompletedTask queries the "completed_task" edge of the CompletedTask entity.
func (ct *CompletedTask) QueryCompletedTask() *TaskQuery {
	return NewCompletedTaskClient(ct.config).QueryCompletedTask(ct)
}

// Update returns a builder for updating this CompletedTask.
// Note that you need to call CompletedTask.Unwrap() before calling this method if this CompletedTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CompletedTask) Update() *CompletedTaskUpdateOne {
	return NewCompletedTaskClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CompletedTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CompletedTask) Unwrap() *CompletedTask {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompletedTask is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CompletedTask) String() string {
	var builder strings.Builder
	builder.WriteString("CompletedTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("answer=")
	builder.WriteString(ct.Answer)
	builder.WriteString(", ")
	builder.WriteString("is_completed=")
	builder.WriteString(fmt.Sprintf("%v", ct.IsCompleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.UserID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.TaskID))
	builder.WriteByte(')')
	return builder.String()
}

// CompletedTasks is a parsable slice of CompletedTask.
type CompletedTasks []*CompletedTask
