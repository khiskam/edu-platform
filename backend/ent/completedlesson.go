// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedLesson is the model entity for the CompletedLesson schema.
type CompletedLesson struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// LessonID holds the value of the "lesson_id" field.
	LessonID uuid.UUID `json:"lesson_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompletedLessonQuery when eager-loading is set.
	Edges        CompletedLessonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompletedLessonEdges holds the relations/edges for other nodes in the graph.
type CompletedLessonEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// CompletedLesson holds the value of the completed_lesson edge.
	CompletedLesson *Lesson `json:"completed_lesson,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedLessonEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// CompletedLessonOrErr returns the CompletedLesson value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompletedLessonEdges) CompletedLessonOrErr() (*Lesson, error) {
	if e.CompletedLesson != nil {
		return e.CompletedLesson, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: lesson.Label}
	}
	return nil, &NotLoadedError{edge: "completed_lesson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompletedLesson) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case completedlesson.FieldID, completedlesson.FieldUserID, completedlesson.FieldLessonID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompletedLesson fields.
func (cl *CompletedLesson) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case completedlesson.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cl.ID = *value
			}
		case completedlesson.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cl.UserID = *value
			}
		case completedlesson.FieldLessonID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_id", values[i])
			} else if value != nil {
				cl.LessonID = *value
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompletedLesson.
// This includes values selected through modifiers, order, etc.
func (cl *CompletedLesson) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the CompletedLesson entity.
func (cl *CompletedLesson) QueryAuthor() *UserQuery {
	return NewCompletedLessonClient(cl.config).QueryAuthor(cl)
}

// QueryCompletedLesson queries the "completed_lesson" edge of the CompletedLesson entity.
func (cl *CompletedLesson) QueryCompletedLesson() *LessonQuery {
	return NewCompletedLessonClient(cl.config).QueryCompletedLesson(cl)
}

// Update returns a builder for updating this CompletedLesson.
// Note that you need to call CompletedLesson.Unwrap() before calling this method if this CompletedLesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CompletedLesson) Update() *CompletedLessonUpdateOne {
	return NewCompletedLessonClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CompletedLesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CompletedLesson) Unwrap() *CompletedLesson {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompletedLesson is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CompletedLesson) String() string {
	var builder strings.Builder
	builder.WriteString("CompletedLesson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.UserID))
	builder.WriteString(", ")
	builder.WriteString("lesson_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.LessonID))
	builder.WriteByte(')')
	return builder.String()
}

// CompletedLessons is a parsable slice of CompletedLesson.
type CompletedLessons []*CompletedLesson
