// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/completedtask"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
	"github.com/khiskam/edu-platform/backend/ent/task"
	"github.com/khiskam/edu-platform/backend/ent/user"
)

// CompletedTaskUpdate is the builder for updating CompletedTask entities.
type CompletedTaskUpdate struct {
	config
	hooks    []Hook
	mutation *CompletedTaskMutation
}

// Where appends a list predicates to the CompletedTaskUpdate builder.
func (ctu *CompletedTaskUpdate) Where(ps ...predicate.CompletedTask) *CompletedTaskUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetAnswer sets the "answer" field.
func (ctu *CompletedTaskUpdate) SetAnswer(s string) *CompletedTaskUpdate {
	ctu.mutation.SetAnswer(s)
	return ctu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableAnswer(s *string) *CompletedTaskUpdate {
	if s != nil {
		ctu.SetAnswer(*s)
	}
	return ctu
}

// SetIsCompleted sets the "is_completed" field.
func (ctu *CompletedTaskUpdate) SetIsCompleted(b bool) *CompletedTaskUpdate {
	ctu.mutation.SetIsCompleted(b)
	return ctu
}

// SetNillableIsCompleted sets the "is_completed" field if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableIsCompleted(b *bool) *CompletedTaskUpdate {
	if b != nil {
		ctu.SetIsCompleted(*b)
	}
	return ctu
}

// SetUserID sets the "user_id" field.
func (ctu *CompletedTaskUpdate) SetUserID(u uuid.UUID) *CompletedTaskUpdate {
	ctu.mutation.SetUserID(u)
	return ctu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableUserID(u *uuid.UUID) *CompletedTaskUpdate {
	if u != nil {
		ctu.SetUserID(*u)
	}
	return ctu
}

// ClearUserID clears the value of the "user_id" field.
func (ctu *CompletedTaskUpdate) ClearUserID() *CompletedTaskUpdate {
	ctu.mutation.ClearUserID()
	return ctu
}

// SetTaskID sets the "task_id" field.
func (ctu *CompletedTaskUpdate) SetTaskID(u uuid.UUID) *CompletedTaskUpdate {
	ctu.mutation.SetTaskID(u)
	return ctu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableTaskID(u *uuid.UUID) *CompletedTaskUpdate {
	if u != nil {
		ctu.SetTaskID(*u)
	}
	return ctu
}

// ClearTaskID clears the value of the "task_id" field.
func (ctu *CompletedTaskUpdate) ClearTaskID() *CompletedTaskUpdate {
	ctu.mutation.ClearTaskID()
	return ctu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (ctu *CompletedTaskUpdate) SetAuthorID(id uuid.UUID) *CompletedTaskUpdate {
	ctu.mutation.SetAuthorID(id)
	return ctu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableAuthorID(id *uuid.UUID) *CompletedTaskUpdate {
	if id != nil {
		ctu = ctu.SetAuthorID(*id)
	}
	return ctu
}

// SetAuthor sets the "author" edge to the User entity.
func (ctu *CompletedTaskUpdate) SetAuthor(u *User) *CompletedTaskUpdate {
	return ctu.SetAuthorID(u.ID)
}

// SetCompletedTaskID sets the "completed_task" edge to the Task entity by ID.
func (ctu *CompletedTaskUpdate) SetCompletedTaskID(id uuid.UUID) *CompletedTaskUpdate {
	ctu.mutation.SetCompletedTaskID(id)
	return ctu
}

// SetNillableCompletedTaskID sets the "completed_task" edge to the Task entity by ID if the given value is not nil.
func (ctu *CompletedTaskUpdate) SetNillableCompletedTaskID(id *uuid.UUID) *CompletedTaskUpdate {
	if id != nil {
		ctu = ctu.SetCompletedTaskID(*id)
	}
	return ctu
}

// SetCompletedTask sets the "completed_task" edge to the Task entity.
func (ctu *CompletedTaskUpdate) SetCompletedTask(t *Task) *CompletedTaskUpdate {
	return ctu.SetCompletedTaskID(t.ID)
}

// Mutation returns the CompletedTaskMutation object of the builder.
func (ctu *CompletedTaskUpdate) Mutation() *CompletedTaskMutation {
	return ctu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (ctu *CompletedTaskUpdate) ClearAuthor() *CompletedTaskUpdate {
	ctu.mutation.ClearAuthor()
	return ctu
}

// ClearCompletedTask clears the "completed_task" edge to the Task entity.
func (ctu *CompletedTaskUpdate) ClearCompletedTask() *CompletedTaskUpdate {
	ctu.mutation.ClearCompletedTask()
	return ctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CompletedTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CompletedTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CompletedTaskUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CompletedTaskUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *CompletedTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(completedtask.Table, completedtask.Columns, sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Answer(); ok {
		_spec.SetField(completedtask.FieldAnswer, field.TypeString, value)
	}
	if value, ok := ctu.mutation.IsCompleted(); ok {
		_spec.SetField(completedtask.FieldIsCompleted, field.TypeBool, value)
	}
	if ctu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.AuthorTable,
			Columns: []string{completedtask.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.AuthorTable,
			Columns: []string{completedtask.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.CompletedTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.CompletedTaskTable,
			Columns: []string{completedtask.CompletedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.CompletedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.CompletedTaskTable,
			Columns: []string{completedtask.CompletedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CompletedTaskUpdateOne is the builder for updating a single CompletedTask entity.
type CompletedTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompletedTaskMutation
}

// SetAnswer sets the "answer" field.
func (ctuo *CompletedTaskUpdateOne) SetAnswer(s string) *CompletedTaskUpdateOne {
	ctuo.mutation.SetAnswer(s)
	return ctuo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableAnswer(s *string) *CompletedTaskUpdateOne {
	if s != nil {
		ctuo.SetAnswer(*s)
	}
	return ctuo
}

// SetIsCompleted sets the "is_completed" field.
func (ctuo *CompletedTaskUpdateOne) SetIsCompleted(b bool) *CompletedTaskUpdateOne {
	ctuo.mutation.SetIsCompleted(b)
	return ctuo
}

// SetNillableIsCompleted sets the "is_completed" field if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableIsCompleted(b *bool) *CompletedTaskUpdateOne {
	if b != nil {
		ctuo.SetIsCompleted(*b)
	}
	return ctuo
}

// SetUserID sets the "user_id" field.
func (ctuo *CompletedTaskUpdateOne) SetUserID(u uuid.UUID) *CompletedTaskUpdateOne {
	ctuo.mutation.SetUserID(u)
	return ctuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableUserID(u *uuid.UUID) *CompletedTaskUpdateOne {
	if u != nil {
		ctuo.SetUserID(*u)
	}
	return ctuo
}

// ClearUserID clears the value of the "user_id" field.
func (ctuo *CompletedTaskUpdateOne) ClearUserID() *CompletedTaskUpdateOne {
	ctuo.mutation.ClearUserID()
	return ctuo
}

// SetTaskID sets the "task_id" field.
func (ctuo *CompletedTaskUpdateOne) SetTaskID(u uuid.UUID) *CompletedTaskUpdateOne {
	ctuo.mutation.SetTaskID(u)
	return ctuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableTaskID(u *uuid.UUID) *CompletedTaskUpdateOne {
	if u != nil {
		ctuo.SetTaskID(*u)
	}
	return ctuo
}

// ClearTaskID clears the value of the "task_id" field.
func (ctuo *CompletedTaskUpdateOne) ClearTaskID() *CompletedTaskUpdateOne {
	ctuo.mutation.ClearTaskID()
	return ctuo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (ctuo *CompletedTaskUpdateOne) SetAuthorID(id uuid.UUID) *CompletedTaskUpdateOne {
	ctuo.mutation.SetAuthorID(id)
	return ctuo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableAuthorID(id *uuid.UUID) *CompletedTaskUpdateOne {
	if id != nil {
		ctuo = ctuo.SetAuthorID(*id)
	}
	return ctuo
}

// SetAuthor sets the "author" edge to the User entity.
func (ctuo *CompletedTaskUpdateOne) SetAuthor(u *User) *CompletedTaskUpdateOne {
	return ctuo.SetAuthorID(u.ID)
}

// SetCompletedTaskID sets the "completed_task" edge to the Task entity by ID.
func (ctuo *CompletedTaskUpdateOne) SetCompletedTaskID(id uuid.UUID) *CompletedTaskUpdateOne {
	ctuo.mutation.SetCompletedTaskID(id)
	return ctuo
}

// SetNillableCompletedTaskID sets the "completed_task" edge to the Task entity by ID if the given value is not nil.
func (ctuo *CompletedTaskUpdateOne) SetNillableCompletedTaskID(id *uuid.UUID) *CompletedTaskUpdateOne {
	if id != nil {
		ctuo = ctuo.SetCompletedTaskID(*id)
	}
	return ctuo
}

// SetCompletedTask sets the "completed_task" edge to the Task entity.
func (ctuo *CompletedTaskUpdateOne) SetCompletedTask(t *Task) *CompletedTaskUpdateOne {
	return ctuo.SetCompletedTaskID(t.ID)
}

// Mutation returns the CompletedTaskMutation object of the builder.
func (ctuo *CompletedTaskUpdateOne) Mutation() *CompletedTaskMutation {
	return ctuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (ctuo *CompletedTaskUpdateOne) ClearAuthor() *CompletedTaskUpdateOne {
	ctuo.mutation.ClearAuthor()
	return ctuo
}

// ClearCompletedTask clears the "completed_task" edge to the Task entity.
func (ctuo *CompletedTaskUpdateOne) ClearCompletedTask() *CompletedTaskUpdateOne {
	ctuo.mutation.ClearCompletedTask()
	return ctuo
}

// Where appends a list predicates to the CompletedTaskUpdate builder.
func (ctuo *CompletedTaskUpdateOne) Where(ps ...predicate.CompletedTask) *CompletedTaskUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CompletedTaskUpdateOne) Select(field string, fields ...string) *CompletedTaskUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CompletedTask entity.
func (ctuo *CompletedTaskUpdateOne) Save(ctx context.Context) (*CompletedTask, error) {
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CompletedTaskUpdateOne) SaveX(ctx context.Context) *CompletedTask {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CompletedTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CompletedTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *CompletedTaskUpdateOne) sqlSave(ctx context.Context) (_node *CompletedTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(completedtask.Table, completedtask.Columns, sqlgraph.NewFieldSpec(completedtask.FieldID, field.TypeUUID))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompletedTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, completedtask.FieldID)
		for _, f := range fields {
			if !completedtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != completedtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Answer(); ok {
		_spec.SetField(completedtask.FieldAnswer, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.IsCompleted(); ok {
		_spec.SetField(completedtask.FieldIsCompleted, field.TypeBool, value)
	}
	if ctuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.AuthorTable,
			Columns: []string{completedtask.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.AuthorTable,
			Columns: []string{completedtask.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.CompletedTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.CompletedTaskTable,
			Columns: []string{completedtask.CompletedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.CompletedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   completedtask.CompletedTaskTable,
			Columns: []string{completedtask.CompletedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompletedTask{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{completedtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
