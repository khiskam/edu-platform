// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khiskam/edu-platform/backend/ent/category"
	"github.com/khiskam/edu-platform/backend/ent/completedlesson"
	"github.com/khiskam/edu-platform/backend/ent/lesson"
	"github.com/khiskam/edu-platform/backend/ent/predicate"
)

// LessonUpdate is the builder for updating Lesson entities.
type LessonUpdate struct {
	config
	hooks    []Hook
	mutation *LessonMutation
}

// Where appends a list predicates to the LessonUpdate builder.
func (lu *LessonUpdate) Where(ps ...predicate.Lesson) *LessonUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetTitle sets the "title" field.
func (lu *LessonUpdate) SetTitle(s string) *LessonUpdate {
	lu.mutation.SetTitle(s)
	return lu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableTitle(s *string) *LessonUpdate {
	if s != nil {
		lu.SetTitle(*s)
	}
	return lu
}

// SetDescription sets the "description" field.
func (lu *LessonUpdate) SetDescription(s string) *LessonUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableDescription(s *string) *LessonUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// SetLayout sets the "layout" field.
func (lu *LessonUpdate) SetLayout(s string) *LessonUpdate {
	lu.mutation.SetLayout(s)
	return lu
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableLayout(s *string) *LessonUpdate {
	if s != nil {
		lu.SetLayout(*s)
	}
	return lu
}

// SetCategoryID sets the "category_id" field.
func (lu *LessonUpdate) SetCategoryID(u uuid.UUID) *LessonUpdate {
	lu.mutation.SetCategoryID(u)
	return lu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (lu *LessonUpdate) SetNillableCategoryID(u *uuid.UUID) *LessonUpdate {
	if u != nil {
		lu.SetCategoryID(*u)
	}
	return lu
}

// ClearCategoryID clears the value of the "category_id" field.
func (lu *LessonUpdate) ClearCategoryID() *LessonUpdate {
	lu.mutation.ClearCategoryID()
	return lu
}

// AddCompletedLessonIDs adds the "completed_lessons" edge to the CompletedLesson entity by IDs.
func (lu *LessonUpdate) AddCompletedLessonIDs(ids ...uuid.UUID) *LessonUpdate {
	lu.mutation.AddCompletedLessonIDs(ids...)
	return lu
}

// AddCompletedLessons adds the "completed_lessons" edges to the CompletedLesson entity.
func (lu *LessonUpdate) AddCompletedLessons(c ...*CompletedLesson) *LessonUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddCompletedLessonIDs(ids...)
}

// SetLessonID sets the "lesson" edge to the Category entity by ID.
func (lu *LessonUpdate) SetLessonID(id uuid.UUID) *LessonUpdate {
	lu.mutation.SetLessonID(id)
	return lu
}

// SetNillableLessonID sets the "lesson" edge to the Category entity by ID if the given value is not nil.
func (lu *LessonUpdate) SetNillableLessonID(id *uuid.UUID) *LessonUpdate {
	if id != nil {
		lu = lu.SetLessonID(*id)
	}
	return lu
}

// SetLesson sets the "lesson" edge to the Category entity.
func (lu *LessonUpdate) SetLesson(c *Category) *LessonUpdate {
	return lu.SetLessonID(c.ID)
}

// Mutation returns the LessonMutation object of the builder.
func (lu *LessonUpdate) Mutation() *LessonMutation {
	return lu.mutation
}

// ClearCompletedLessons clears all "completed_lessons" edges to the CompletedLesson entity.
func (lu *LessonUpdate) ClearCompletedLessons() *LessonUpdate {
	lu.mutation.ClearCompletedLessons()
	return lu
}

// RemoveCompletedLessonIDs removes the "completed_lessons" edge to CompletedLesson entities by IDs.
func (lu *LessonUpdate) RemoveCompletedLessonIDs(ids ...uuid.UUID) *LessonUpdate {
	lu.mutation.RemoveCompletedLessonIDs(ids...)
	return lu
}

// RemoveCompletedLessons removes "completed_lessons" edges to CompletedLesson entities.
func (lu *LessonUpdate) RemoveCompletedLessons(c ...*CompletedLesson) *LessonUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveCompletedLessonIDs(ids...)
}

// ClearLesson clears the "lesson" edge to the Category entity.
func (lu *LessonUpdate) ClearLesson() *LessonUpdate {
	lu.mutation.ClearLesson()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LessonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LessonUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LessonUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LessonUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LessonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if value, ok := lu.mutation.Layout(); ok {
		_spec.SetField(lesson.FieldLayout, field.TypeString, value)
	}
	if lu.mutation.CompletedLessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedCompletedLessonsIDs(); len(nodes) > 0 && !lu.mutation.CompletedLessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CompletedLessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.LessonTable,
			Columns: []string{lesson.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.LessonTable,
			Columns: []string{lesson.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LessonUpdateOne is the builder for updating a single Lesson entity.
type LessonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonMutation
}

// SetTitle sets the "title" field.
func (luo *LessonUpdateOne) SetTitle(s string) *LessonUpdateOne {
	luo.mutation.SetTitle(s)
	return luo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableTitle(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetTitle(*s)
	}
	return luo
}

// SetDescription sets the "description" field.
func (luo *LessonUpdateOne) SetDescription(s string) *LessonUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableDescription(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// SetLayout sets the "layout" field.
func (luo *LessonUpdateOne) SetLayout(s string) *LessonUpdateOne {
	luo.mutation.SetLayout(s)
	return luo
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableLayout(s *string) *LessonUpdateOne {
	if s != nil {
		luo.SetLayout(*s)
	}
	return luo
}

// SetCategoryID sets the "category_id" field.
func (luo *LessonUpdateOne) SetCategoryID(u uuid.UUID) *LessonUpdateOne {
	luo.mutation.SetCategoryID(u)
	return luo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableCategoryID(u *uuid.UUID) *LessonUpdateOne {
	if u != nil {
		luo.SetCategoryID(*u)
	}
	return luo
}

// ClearCategoryID clears the value of the "category_id" field.
func (luo *LessonUpdateOne) ClearCategoryID() *LessonUpdateOne {
	luo.mutation.ClearCategoryID()
	return luo
}

// AddCompletedLessonIDs adds the "completed_lessons" edge to the CompletedLesson entity by IDs.
func (luo *LessonUpdateOne) AddCompletedLessonIDs(ids ...uuid.UUID) *LessonUpdateOne {
	luo.mutation.AddCompletedLessonIDs(ids...)
	return luo
}

// AddCompletedLessons adds the "completed_lessons" edges to the CompletedLesson entity.
func (luo *LessonUpdateOne) AddCompletedLessons(c ...*CompletedLesson) *LessonUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddCompletedLessonIDs(ids...)
}

// SetLessonID sets the "lesson" edge to the Category entity by ID.
func (luo *LessonUpdateOne) SetLessonID(id uuid.UUID) *LessonUpdateOne {
	luo.mutation.SetLessonID(id)
	return luo
}

// SetNillableLessonID sets the "lesson" edge to the Category entity by ID if the given value is not nil.
func (luo *LessonUpdateOne) SetNillableLessonID(id *uuid.UUID) *LessonUpdateOne {
	if id != nil {
		luo = luo.SetLessonID(*id)
	}
	return luo
}

// SetLesson sets the "lesson" edge to the Category entity.
func (luo *LessonUpdateOne) SetLesson(c *Category) *LessonUpdateOne {
	return luo.SetLessonID(c.ID)
}

// Mutation returns the LessonMutation object of the builder.
func (luo *LessonUpdateOne) Mutation() *LessonMutation {
	return luo.mutation
}

// ClearCompletedLessons clears all "completed_lessons" edges to the CompletedLesson entity.
func (luo *LessonUpdateOne) ClearCompletedLessons() *LessonUpdateOne {
	luo.mutation.ClearCompletedLessons()
	return luo
}

// RemoveCompletedLessonIDs removes the "completed_lessons" edge to CompletedLesson entities by IDs.
func (luo *LessonUpdateOne) RemoveCompletedLessonIDs(ids ...uuid.UUID) *LessonUpdateOne {
	luo.mutation.RemoveCompletedLessonIDs(ids...)
	return luo
}

// RemoveCompletedLessons removes "completed_lessons" edges to CompletedLesson entities.
func (luo *LessonUpdateOne) RemoveCompletedLessons(c ...*CompletedLesson) *LessonUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveCompletedLessonIDs(ids...)
}

// ClearLesson clears the "lesson" edge to the Category entity.
func (luo *LessonUpdateOne) ClearLesson() *LessonUpdateOne {
	luo.mutation.ClearLesson()
	return luo
}

// Where appends a list predicates to the LessonUpdate builder.
func (luo *LessonUpdateOne) Where(ps ...predicate.Lesson) *LessonUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LessonUpdateOne) Select(field string, fields ...string) *LessonUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lesson entity.
func (luo *LessonUpdateOne) Save(ctx context.Context) (*Lesson, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LessonUpdateOne) SaveX(ctx context.Context) *Lesson {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LessonUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LessonUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LessonUpdateOne) sqlSave(ctx context.Context) (_node *Lesson, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lesson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lesson.FieldID)
		for _, f := range fields {
			if !lesson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lesson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if value, ok := luo.mutation.Layout(); ok {
		_spec.SetField(lesson.FieldLayout, field.TypeString, value)
	}
	if luo.mutation.CompletedLessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedCompletedLessonsIDs(); len(nodes) > 0 && !luo.mutation.CompletedLessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CompletedLessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lesson.CompletedLessonsTable,
			Columns: []string{lesson.CompletedLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(completedlesson.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LessonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.LessonTable,
			Columns: []string{lesson.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LessonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lesson.LessonTable,
			Columns: []string{lesson.LessonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lesson{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
